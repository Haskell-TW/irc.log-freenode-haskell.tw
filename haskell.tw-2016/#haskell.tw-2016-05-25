11:07:01 <favonia> xDDD
12:45:05 <c9s> CindyLinz: 咦 原來 Data.Map look 只是 iterate a list 看每一個 tuple 的第一個 element ?
12:45:32 <c9s> * 從上禮拜又開始複習 haskell ... (不斷輪迴 XDDDD)
12:46:45 <c9s> 好像複習 Haskell 變成每年一度的例行事項 XD
13:00:08 <c9s> CindyLinz: 真正的 hash 在 haskell 裡面應該用什麼?
15:15:59 <CindyLinz> 等等.. Data.Map lookup 不是 iterate list 啊..
15:16:09 <CindyLinz> 它是 balanced binary tree
15:17:06 <CindyLinz> 應該大部分的人會用這個 # https://hackage.haskell.org/package/hashtables-1.2.0.2
15:17:27 <CindyLinz> 不過我不太愛用 hash, 因為要想 hash function 有心理負擔
15:17:43 <CindyLinz> balanced search tree 只需要比大小, 比較簡單
15:18:11 <CindyLinz> 而且 hash 都是 impure 的, 有些時候不能用
15:19:53 <CindyLinz> 不過.. 說要想 hash function... 其實也可以這樣子找現成的 hash function 來用 :p # https://hackage.haskell.org/packages/search?terms=hash
15:33:15 <c9s> 哦哦?
15:33:18 <c9s> 原來如此~~
15:33:56 <c9s> 我這次是讀 learn you haskell for a great good, 他的範例是寫成 iterate 的方式 XD
15:34:08 <CindyLinz> 用 list 的通常是教學用
15:34:20 <CindyLinz> 好讀好懂 ^^
15:34:44 <CindyLinz> 就像... Haskell String 是 [Char] 也是 list.. 但是要寫認真的程式會用 ByteString 們或是 Text
15:39:12 <CindyLinz> 這種存小單位的 list 非常浪費資源啊..  資料空間佔1單位, list 自身結構要佔3單位.. 而且如果用 boxed 保存而不 pack 起來的話要再多一個單位 box 用的指標, 總共就是5倍空間了
15:39:49 <c9s> 哦哦哦 了解~~
15:49:23 <c9s> CindyLinz: Haskell 存樹狀結構的東西效能好像比較弱一點?
15:49:33 <c9s> 這個猜測不知道有沒有錯誤的地方 @@?
15:49:59 <c9s> 假設我的 ast 很大, hs 的話有什麼比較有效率的查找方式?
15:51:45 <CindyLinz> c9s: 效能比誰弱一點?
15:53:00 <c9s> 譬如說像 Go XD
15:53:06 <CindyLinz> ast 你自己設計的, 你自己要提供有效率的資料結構啊
15:53:13 <CindyLinz> 你有測過嗎?
15:54:22 <CindyLinz> Haskell 的樹狀結構應該不太可能輸才對
15:56:32 <c9s> 還沒 XD 我是看 programming langugage bencharmk 的 binary tree XD
16:02:14 <cibs> c9s: 這個? http://benchmarksgame.alioth.debian.org/u64q/performance.php?test=binarytrees
16:02:23 <c9s> yeah
16:02:26 <cibs> c9s: 上面不是 haskell 比較有效率嗎 @@
16:03:18 <c9s> cibs: 他的腳本很多個, 第一名的有用 GHC.Conc 不算 XD
16:03:47 <cibs> XD ok
16:04:34 <c9s> 不過, 8.6 的那個 GHC 的確蠻快的
16:04:41 <c9s> 我可能是看到另外一個 page
16:05:48 <c9s> 也有可能是我記錯了, 我先實作有確認再來回報一下 XD
16:09:22 <CindyLinz> 8.6 那個還沒有用到 {-# UNPACK #-}
16:09:57 <CindyLinz> data Tree = Nil | Node !Int !Tree !Tree 可以改寫成 data Tree = Nil | Node {-# UNPACK #-} !Int !Tree !Tree
16:10:55 <CindyLinz> 不過它 compile 時加了 -funbox-strict-fields
16:11:01 <CindyLinz> 那效果一樣了
18:19:40 <c9s> CindyLinz: unbox ?
18:24:38 <CindyLinz> 其實應該是 GHC special 的東西
18:24:51 <CindyLinz> GHC 的實作方式, 但不是 Haskell 規定的唯一實作方式
18:25:01 <CindyLinz> 是吃掉效能的重點 XD
18:26:12 <CindyLinz> c9s: https://downloads.haskell.org/~ghc/6.12.3/docs/html/users_guide/primitives.html
18:26:43 <CindyLinz> google 出來給的竟然是 6.12 這麼舊的版本 XD
18:27:23 <c9s> 喔喔
18:27:25 <c9s> 原來
18:27:33 <c9s> 有點像是 zend engine 的 zval 之類的
18:40:08 <c9s> 所以 Int# 這樣就可以變成 raw machine type?
18:48:41 <CindyLinz> 對
18:48:49 <CindyLinz> zval 有記錄 type, 這個沒有..
19:50:39 <c9s> 哦哦 聽起來蠻不賴的
21:28:03 <CindyLinz> [警告] 很難用.. XD
21:28:15 <c9s> XDD
21:28:18 <CindyLinz> Int# 也是 GHC special..
21:28:37 <c9s> 不過.. 現在應該也沒有其他比得上 GHC 的 compiler 了? XD
21:28:38 <CindyLinz> Haskell 沒有定義這東東, 沒有規定它應該怎麼操作, 就 GHC 自己亂弄
21:28:44 <CindyLinz> 看環境..
21:28:51 <c9s> 真的嗎? XDD
21:28:59 <c9s> 好奇現在還有人在用 Hugs 嗎?
21:29:07 <CindyLinz> Hugs 大概沒有
21:29:12 <CindyLinz> 我剛剛想到的是 jhc, ajhc..
21:29:16 <CindyLinz> 但我沒用過...
21:29:23 <CindyLinz> 它們的特性是可以生成很小的 binary
21:29:26 <c9s> !!
21:29:49 <c9s> CindyLinz: 你有沒有要開 haskell 家教 XDDDD 跟你上課 B)
21:29:49 <CindyLinz> GHC 主打就是 feature 多, inline 盡量展開, binary 盡量大
21:29:56 <CindyLinz> 還沒有 ^^|
21:30:13 <CindyLinz> 我主要還在賺 perl.. XD
21:30:32 <c9s> CindyLinz: 蛤 是喔 XDDD
21:30:51 <CindyLinz> 不過為什麼 ajhc 會是 hackage 上的一個 package 我就不知道了 XD # https://hackage.haskell.org/package/ajhc
21:31:06 <c9s> haskell 寫的 compiler ?
21:31:44 <CindyLinz> 我不熟.. ^^|
21:32:12 <CindyLinz> github 說 90% 是 Haskell # https://github.com/ajhc/ajhc
21:32:43 <CindyLinz> 這是怎樣..w # *** We are closing Ajhc project. ***
21:32:48 <CindyLinz> 叫大家去用 jhc
21:34:05 <CindyLinz> 好像有印象說 ajhc 是幫 jhc 嘗試新 feature, 然後會再 merge 進 jhc 之類的
21:35:47 <CindyLinz> c9s: 有個 lhc.. 說是專門 target llvm 的 Haskell # https://github.com/Lemmih/lhc
21:37:41 <CindyLinz> 欸講到那個 Int#..
21:38:03 <CindyLinz> 我自己的經驗是把能改寫的地方改用這個的話, 效率是會再快一點點, 可能 5% 之類的
21:38:23 <c9s> 還蠻多的耶 其實...
21:38:25 <CindyLinz> 就.. 演算法資料結構主體完全不動, 只有把能拆掉的拆掉
21:38:48 <c9s> haskell 寫 codegen 會不會不好寫?
21:39:11 <CindyLinz> 語意有變.. 所以, 我覺得是因為這樣所以 GHC 的設計不擅自換掉 @@"
21:39:18 <CindyLinz> 應該會很好寫
21:39:44 <c9s> 如果要寫一個 ast 的 tree pattern matching
21:39:45 <CindyLinz> 我主張高效能的 Haskell Compiler 應該大膽引入大量的 undefined behavior.. XD
21:39:51 <c9s> haskell 裡面通常會怎麼做?
21:39:55 <c9s> XDD
21:40:21 <c9s> CindyLinz: fork 出來叫 HHC (High-performance Haskell Compiler) XD
21:40:43 <CindyLinz> 大量 undefined behavior 的意思是說那些「語意有變」就含在 undefined behavior 裡面, programmer (user) 有責任不要動用到
21:40:59 <CindyLinz> 那 compiler 就可以積極地把程式碼搬來搬去了
21:41:10 <CindyLinz> ast 的 tree pattern matching 是什麼啊?
21:42:20 <c9s> 就是譬如說 找到 ast 的 pattern 是 if 以及裡面有一個 true 跟多個 &&
21:43:06 <CindyLinz> 已經是 Haskell 的資料結構還是是一團字串啊?
21:43:08 <c9s> Java 有一套 ANTLR 有這個東西
21:43:15 <c9s> 資料結構~~
21:43:26 <CindyLinz> 那不是一個 case 就好了嗎? ^^
21:43:57 <c9s> https://theantlrguy.atlassian.net/wiki/display/ANTLR3/Tree+pattern+matching
21:44:02 <c9s> 好像會長成像這樣
21:44:08 <CindyLinz> case expr of { If (cond1 `And` cond2) thenExpr elseExpr -> ... } 之類的?
21:44:11 <c9s> CindyLinz: 好像也是!?
21:44:27 <CindyLinz> 我不知道一個 true 跟很多個 && 是什麼意思 ^^|
21:44:37 <c9s> 哦 只是隨便亂舉例 XD
21:44:46 <c9s> optimize 的 tree visitor 會用到 XD
21:44:59 <c9s> 你的 { If (cond1 `And` cond2) thenExpr elseExpr -> ... } ... 這段是 data constructor 嗎?
21:45:07 <CindyLinz> If, And 這兩個是
21:45:21 <CindyLinz> 7.10 以上的話也可能是 Pattern synonym
21:45:45 <CindyLinz> 如果條件複雜, 覺得寫成靜態 pattern 不方便的話可以用函數...
21:46:08 <CindyLinz> 成功 match 就會傳回 Just (..你想取出的資料欄位..), 不成功就 Nothing
21:46:22 <c9s> 好像好懂很多!
21:46:36 <CindyLinz> 假設這函數叫作... mySpecialMatch 好了
21:46:37 <c9s> ANTLR 是這樣寫  =>   add : ^('+' x=. y=.) {do something with $x and $y} ;
21:47:26 <CindyLinz> 可以寫成 case expr of { mySpecialMatch -> Just (..要接收資料欄位的變數們..) -> ... match 的程式碼 ... }
21:48:08 <c9s> 哦哦!!
21:48:16 <CindyLinz> 不確定要不要多括號.. 這個關鍵字叫作 ViewPatterns
21:48:24 <c9s> 我看看
21:48:30 <CindyLinz> 如果要多括號的話是寫成 case expr of { (mySpecialMatch -> Just (..要接收資料欄位的變數們..)) -> ... match 的程式碼 ... }
21:49:11 <c9s> 吼吼吼 感覺我學十年都學不完 (哭)
21:49:19 <c9s> XDDDD
21:49:26 <c9s> 離開一下 XDDD
21:52:05 <CindyLinz> ViewPatterns 不太重要.. 沒空的話可以跳過它
21:52:35 <CindyLinz> 用 case mySpecialMatch expr of { Just (..接收變數..) -> ... } 就有一樣效果了
21:52:59 <CindyLinz> 只是如果想一次 match apply N 種不同的解析函數的話, 會要寫好幾組巢狀的 case..of 而已
21:53:05 <CindyLinz> code 長一點, 但是功能一樣
21:56:20 <CindyLinz> 7.10 以後把 ViewPatterns 想寫的東西寫在 PatternSynonym 裡面, 某種程度可以讓 pattern match 的時候更好看一點 :p
21:56:27 <CindyLinz> 但也不是很必要的功能
22:08:16 <c9s> 看了一下...感覺是拿來寫 compiler 超好用的功能啊 XDD
22:08:25 <c9s> 決定了 XDD
22:08:48 <CindyLinz> Haskell 適合寫 compiler 絕對是無庸置疑的...
22:09:01 <c9s> 真的.... XDDD
22:09:14 <c9s> 晚點再來 publish 我的秘密 project XD
22:09:17 <CindyLinz> 除了.... 語法定義連人類都說不清楚的時候w
22:09:22 <c9s> XDDDD
22:09:23 <CindyLinz> 像是那個 sass
22:10:05 <CindyLinz> 不過... Haskell 會引導你發現原來語法上有這麼多沒決定好的 corner case, 然後感覺崩潰w
22:18:54 <c9s> XD
22:19:04 <c9s> 可能要先看我程度有沒有到那邊 XD
23:27:42 <c9s> CindyLinz: 問個笨問題 >>= operator 是啥 XD
23:27:53 <c9s> 沒辦法 google operator XD
23:28:45 <c9s> 看起來像 Monad 相關的東西?
23:32:26 <favonia> c9s: 不能 google 可以 hoogle xDD
23:36:02 <monochrom> >>= 是 Monad 的
23:37:59 <favonia> @hoogle (>>=)
23:38:01 <lambdabot> Prelude (>>=) :: Monad m => m a -> (a -> m b) -> m b
23:38:02 <lambdabot> Control.Monad (>>=) :: Monad m => m a -> (a -> m b) -> m b
23:38:02 <lambdabot> Control.Monad.Instances (>>=) :: Monad m => m a -> (a -> m b) -> m b
23:41:03 <favonia> @src Monad
23:41:03 <lambdabot> class Applicative m => Monad m where
23:41:03 <lambdabot>     -- Note: Applicative wasn't a superclass before GHC 7.10
23:41:03 <lambdabot>     (>>=)  :: m a -> (a -> m b) -> m b
23:41:03 <lambdabot>     (>>)   :: m a -> m b -> m b
23:41:03 <lambdabot>     return :: a -> m a
23:41:05 <lambdabot>     fail   :: String -> m a
23:41:51 <monochrom> 野心越大, 崩潰越快. 簡約的語言設計, 才不會那麼多 corner cases.
23:42:59 <c9s> XDDDDD
23:43:04 <c9s> favonia: 感謝!
23:44:08 <c9s> 看起來像是給一個 function 然後他會餵參數給他這樣嗎 XD #dummy'sHaskell
23:45:37 <monochrom> 其實你為甚麼問起 >>= 呢? 如果為了 IO, 可先讀我的 http://www.vex.net/~trebla/haskell/IO.xhtml
23:46:10 <monochrom> 正如 + 是 Num 的, 但 1+1 不用學 Num.
23:47:31 <favonia> c9s: 入門教科書寫的 do { x <- f ; g } 其實就是 (>>=) f (\x -> g)
23:48:26 <monochrom> 不過你說的是. 你給它一個 callback, 它餵參數.
23:48:31 <CindyLinz> c9s: >>= 是 Haskell 的 logo! (另一個角度 XDDDD
23:50:20 <c9s> monochrom: 喔這太棒了 XD
23:50:23 <monochrom> 其實我開始懷疑, 我的 IO.xhtml 已具備 monad tutorial 條件, 儘管我堅決否認...
23:50:47 <c9s> 哦哦 了解 XD
23:51:22 <c9s> 感覺我學完可以寫一份 dummy's haskell XD 用一些粗俗的字眼描述這樣 XD
23:51:45 <c9s> Monad .... 放進去拿出來
23:52:22 <c9s> left partial function = 虎頭蛇尾，留給別人做
23:52:35 <c9s> right partial function = 只想收割
23:52:55 <c9s> 誒...
23:53:12 <c9s> typeclasses 呢.. 讓我想想......
23:54:23 <c9s> (其實我每年心血來潮學 Haskell 都是一直在複習前面，到 Monad 之前又被吸引去玩別的東西 XD
23:54:38 <c9s> 這次應該要下定決心 XD
23:54:52 <monochrom> 粗俗或通俗字詞很有限, 一定不可能描述所有天下事.
23:56:20 <monochrom> 強求通俗就是自甘井底. (強求高雅都是.) 應順其自然, 求傳神.
