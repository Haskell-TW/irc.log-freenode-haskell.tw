11:27:56 <CindyLinz> 我之前的感想是寫 Haskell 應用最好是從核心資料開始寫, 寫的時候同時要想一想資料的表達能力
11:28:12 <CindyLinz> 不過看了 Oleg 這種風格的寫法.. 似乎也可以選擇從函數開始寫 :Q
11:28:42 <CindyLinz> 資料結構長什麼樣都還沒有想好, 就可以先寫函數
11:29:21 <CindyLinz> 而且不是只有函數的 type, 是函數的 value 已經可以開始寫了
11:29:43 <CindyLinz> 然後也可以先丟 ghc 作 type check
11:33:08 <CindyLinz> 寫完以後留下一大堆只有一個 instance 的 class.. XD
12:22:05 <monochrom> 可以理解為由你需要的函數出發幫你想你要甚麼資料.
12:23:41 <monochrom> 不過 Oleg 的境界是最後發覺只需函數, 不再需要資料 XD
12:28:38 <monochrom> 其實做設計有兩個好的起點. 一是先建模形, 所以資料先決. 二是先建 API, 所以函數先決.
12:31:02 <monochrom> 好在無論資料或函數都受限於型別, 所以還是型別先決.
12:34:18 <monochrom> 人們視型別為阻手阻腳的核票機, 而不知型別其實是設計指引
13:31:32 <CindyLinz> 他最後還是有資料
13:32:43 <CindyLinz> 把函數當資料用是另一回事啦, 不一定都從前個角度想啊
