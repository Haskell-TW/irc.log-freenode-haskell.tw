00:08:16 <c9sloud> au++++
00:28:34 <monochrom> 遞歸函數之所以沒問題, 是跟 lazy 有關. 或曰: 眾多 eager 語言都有遞歸函數, 何云 lazy? 答:
00:30:57 <monochrom> 答: eager 語言都有 lazy 成份. 最明顯如 x && y, 是有條件地略過 y. if (c) then body1 else body2, 是有條件地略過 body1 或 body2.
00:33:14 <monochrom> 因此, 在定義遞歸函數時, int fac(int n) { .... fac(...) ... }, 沒有即時追問 "甚麼是fac", 也是 lazy.
00:36:27 <monochrom> 事實上, 在 eager 語言裏自行寫 lazy 的主要辦法就是用一重函數隔開, 例如 g((lambda (): x+y))
01:50:02 <caasihuang> au++++
02:25:34 <hychen> au++++
12:41:32 <twprogrammer> haskell是不是不能定義 自變數有兩個的函數啊?
12:41:40 <twprogrammer> *更正 我說應變數
12:42:15 <twprogrammer> 譬如數學裡 f: R^2->R  在haskell 裡ok, 引數兩個  應變數一個
12:42:28 <twprogrammer> f: R-> R^2 就不行
12:43:02 <twprogrammer> 除非把應變數偽裝成 List 或 Tuple, 偷塞兩個進去
12:43:21 <au> f :: (Real a) => a -> (a, a)
12:43:46 <au> 怎麼說是偽裝呢，curry 和 uncurry 就是做這件事的 :p
12:44:13 <twprogrammer> 喔喔
12:44:26 <twprogrammer> 還沒學到curry :p
12:45:12 <au> 也可以用 fst 和 snd 拆開
12:45:39 <twprogrammer> 我是說把函數回傳兩個東西~
12:46:20 <au> 對啊，像 > properFraction 12.5
12:46:21 <au> (12,0.5)
12:46:21 <twprogrammer> f 引數1 引數2 = 回傳1               haskell的函數好像不允許回傳兩個
12:46:51 <au> 一般都是用 Tuple 沒錯。只要取其中一個時用 fst . properFraction 或 snd . properFraction 即可
12:46:53 <twprogrammer> 除非回傳 (, )這種tuple, fst, snd~
12:46:58 <twprogrammer> 嗯嗯
12:46:58 <au> yeah
12:47:01 <twprogrammer> ok!
12:47:09 <au> 認真講的話， haskell 引數也都是一個
12:47:36 <twprogrammer> 可是好像可以寫 time x y = x*y
12:47:37 <au> 看起來像雙引數的 f :: a -> b -> c 其實是 f :: a -> (b -> c) 喔。
12:47:56 <au> 對，但其實意思是 time x = \y -> x * y
12:48:09 <twprogrammer> 好的~
12:48:12 <au> 因此才可以寫 twice = time 2
12:48:20 <au> 再 twice 21 == 42 這樣
12:49:27 <twprogrammer> 真有趣 fu
12:49:37 <twprogrammer> *一整個數學系的fu
13:23:09 <c9sloud> CindyLinz: 妳的 glibc , gcc 版本是多少
13:24:00 <c9sloud> 我看 strndup glibc 應該是有才對
13:41:04 <CindyLinz> c9sloud: 沒裝 glibc, 只有裝 linux-libc
13:41:09 <CindyLinz> version 3.13.0
13:41:36 <c9sloud> 咦
13:41:38 <c9sloud> 是分開的呀?
13:42:02 <CindyLinz> 咦 還有個 libc6
13:42:13 <CindyLinz> 2.19
13:42:18 <c9sloud> 好奇怪
13:42:23 <c9sloud> 照理說應該有才對
13:42:28 <CindyLinz> 喔 libc6 provides: glibc-2.19-1
13:42:32 <c9sloud> gcc 版本呢?
13:42:58 <c9sloud> glibc 2.10 好像就有 strndup 了
13:43:14 <c9sloud> 喔不過 strdup 要 Since glibc 2.12 才有
13:43:49 <CindyLinz> gcc 4.8.2
13:44:03 <c9sloud> 嗯嗯嗯
13:44:15 <c9sloud> CindyLinz: 你是 ubuntu 13.* 嗎?
13:45:54 <c9sloud> 咦 13.* 的話有耶
13:45:57 <c9sloud> 可以編譯成功
13:47:27 <CindyLinz> 14.04 啊
13:48:03 <c9sloud> 那應該可以才對
13:48:04 <c9sloud> 阿我知道了
13:48:06 <CindyLinz> 我覺得 strdup 這麼小的函數, r3 自帶一組沒什麼不好啦.. ^^|
13:48:19 <c9sloud> llvm 好像不用 include string.h 就可以用 strndup
13:48:27 <c9sloud> 但 linux 環境的話要的樣子
13:48:30 <c9sloud> 來試試看
13:49:15 <c9sloud> 呃 好像沒這回事 XD
13:49:17 <c9sloud> 算了 XDDD
13:54:31 <c9sloud> 結果 autotool 用一用還是覺得太慢了
13:54:37 <c9sloud> 每次只要改到 options
13:54:45 <c9sloud> 就要重跑一次 configure
13:54:55 <c9sloud> 改到某些 code 也要重跑一次 configure ...
13:55:02 <c9sloud> 相較之下 cmake 快多了
13:55:06 <CindyLinz> 需要 configure 層級的 .o 檔嗎? ^^|
13:55:20 <c9sloud> 而且阿 autotool 很辛苦的寫完
13:55:26 <c9sloud> 就立刻忘記怎麼用了 XDDDD
13:55:31 <c9sloud> 每次都要重學醫次
13:55:33 <c9sloud> 一次
13:55:41 <c9sloud> 這次決定 h3 直接用 cmake 就好
14:14:01 <c9sloud> 今天看到憤怒鳥相關 posts 還以為是什麼梗 XD
15:20:03 <c9sloud> yllan__: 咦奇怪你之前貼的那個 swift conditions gist 我找不到了
