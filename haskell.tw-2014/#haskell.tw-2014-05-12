00:00:50 <CindyLinz> 然後那個 guard expression 可以一次寫 N 個
00:01:01 <CindyLinz> 所以跟 ? : 比較沒那麼像
00:01:41 <CindyLinz> > let f n | n == 0 = 25 | n == 1 = 35 | n == 2 = 45 | otherwise = 55 in f 2
00:01:43 <lambdabot>  45
00:01:47 <CindyLinz> > let f n | n == 0 = 25 | n == 1 = 35 | n == 2 = 45 | otherwise = 55 in f 5
00:01:49 <lambdabot>  55
00:01:52 <CindyLinz> > let f n | n == 0 = 25 | n == 1 = 35 | n == 2 = 45 | otherwise = 55 in f 0
00:01:54 <lambdabot>  25
00:02:22 <CindyLinz> > let f n | n == 0 = 25 | n == 1 = 35 | n == 2 = 45 in f 5
00:02:24 <lambdabot>  *Exception: <interactive>:3:5-49: Non-exhaustive patterns in function f
00:03:19 <CindyLinz> 再回到那個 copy 的問題
00:03:22 <CindyLinz> 如果寫成:
00:03:31 <CindyLinz> let ab = f ; (a, b) = ab in .....
00:03:51 <CindyLinz> 那就也不會 copy 了.. 但是和 ab @ (a, b) = f 的語意有一點差異
00:04:37 <CindyLinz> 如果 f 出來的結果不是長得 (oo, xx) 樣的話    ab @ (a, b) 整個會完全沒有 match, 你萬一跑去 seq ab 的話, 會 exception
00:04:52 <CindyLinz> 而如果 let ab = f; (a, b) = ab 的話, seq ab 還是可以用的
00:05:13 <CindyLinz> (前提是 f 不能出來是 undefined 那種東西啦)
00:13:02 <c9sloud> 恩恩恩恩 我消化一下 XD
00:31:01 <CindyLinz> 那個.... 我用 (a, b) 當例子哄... 在最下面這一段不太好用...
00:31:24 <CindyLinz> 因為 (,) type 的東西, 如果不長得一副 (oo, xx) 樣的話, 就是 undefined 或 bottom 那種東西....
00:31:43 <CindyLinz> 改想成 Maybe a 好了...
00:31:56 <CindyLinz> 因為 Maybe a 有 Just a 和 Nothing 兩種正常長相 XD
00:32:31 <CindyLinz> 下面這個會炸:
00:33:23 <CindyLinz> > let f = Nothing ;   aa @ (Just a) = f in case aa of Just _ -> a ; Nothing -> 3
00:33:25 <lambdabot>  *Exception: <interactive>:3:21-37: Irrefutable pattern failed for pattern aa...
00:33:36 <CindyLinz> 然後下面這個可以用:
00:33:51 <CindyLinz> > let f = Nothing ;   aa = f; Just a = aa in case aa of Just _ -> a ; Nothing -> 3
00:33:53 <lambdabot>  3
00:35:30 <CindyLinz> 不過如果配合 ~ 的話, 叫 GHC 別急著 destruct 全部, 那也可以用:
00:35:43 <CindyLinz> > let f = Nothing ;   ~(aa @ (Just a)) = f in case aa of Just _ -> a ; Nothing -> 3
00:35:45 <lambdabot>  *Exception: <interactive>:3:21-40: Irrefutable pattern failed for pattern (a...
00:35:50 <CindyLinz> 咦 搞錯了 XD
00:35:58 <CindyLinz> 那還是不能用... XD
00:36:18 <monochrom> 把 ~ 放深些
00:36:31 <CindyLinz> 嗯 XD  最外一關還是要合才行 :Q
00:37:10 <CindyLinz> > let f = Just Nothing ;   aa @ (Just ~(Just a))) = f in case aa of Just _ -> a ; Nothing -> 3
00:37:12 <lambdabot>  <hint>:1:47: parse error on input ‘)’
00:37:17 <CindyLinz> > let f = Just Nothing ;   aa @ (Just ~(Just a)) = f in case aa of Just _ -> a ; Nothing -> 3
00:37:19 <lambdabot>  *Exception: <interactive>:3:26-50: Irrefutable pattern failed for pattern (D...
00:38:29 <CindyLinz> 好吧... 以前成功的那一次是遇到 lazy IO....||
00:38:36 <CindyLinz> 暫時當沒看到 ~ 的用法好了.....
00:41:17 <monochrom> let 本身已等於加了個 ~. (let pattern = expr in xxx) = case expr of ~pattern -> xxx
00:42:06 <CindyLinz> 嗯嗯 放最外層等於沒寫 @@"
00:42:35 <monochrom> 而 ~ 的詳細作用也得細看條文
00:43:02 <CindyLinz> 照規定應該還是得是最終是一定會 match 的東西才行
00:43:24 <CindyLinz> 只是我不知道 GHC 會偷看 XD
00:43:38 <CindyLinz> 真難騙 XD
00:45:44 <monochrom> 你那個出得到 3 的例子, 倒可圈可點
00:46:29 <CindyLinz> monochrom: 我剛剛才看完這篇 XD # http://www.vex.net/~trebla/haskell/lazy.xhtml
00:47:22 <monochrom> 啊, 不, 看錯了, aa 當然走到 Nothing -> 3, 跟本沒人理會 a
00:48:49 <CindyLinz> 我這個誤解 irrefutable pattern 的部分, 好像在寫 Augmented Red Black tree 的時候中招了很多次....
00:49:01 <CindyLinz> 只是又忘了..... orz
00:51:42 <monochrom> 對了, aa@(Just a) = Nothing 才可圈可點
00:52:33 <CindyLinz> 這個「可圈可點」是什麼意思啦 ^^|   覺得跟我認知的好像不太一樣 XD
00:54:23 <monochrom> 得要小心地機械式計算
00:56:27 <CindyLinz> mmm
01:38:35 <monochrom> CindyLinz: 請參看 http://lpaste.net/100588 , 有個以前例子及今日例子
01:41:27 <CindyLinz> monochrom: 那個 section 編號是什麼意思啊?
01:42:07 <monochrom> 所以結果還是要把 ~ 放深點. aa@ ~(Just a) 應該就可以了. 注意隔開 @ 和 ~, 否則 @~ 當作單一 operator
01:42:20 <monochrom> 那是 Haskell 2010 Report :)
01:42:28 <CindyLinz> 喔喔
01:44:28 <monochrom> 終有一天可以把我在 lpaste 的出文集結成暢銷書 XD
01:45:16 <CindyLinz> 為什麼你有辦法寫那麼多東西啊~ 感覺好辛苦 @_@"
01:45:52 <monochrom> 主要因為游手好閒啦...
01:46:10 <CindyLinz> 那個 lazy.xhtml 裡面竟然還有畫圖 @__@"
01:48:22 <monochrom> 呵呵呵, 那是一個又未完成博士論文, 又太不上心的無業期. 寫了連續兩個星期哩!
01:49:32 <monochrom> 至於圖, 有些確是不厭其煩手寫 SVG 的, 但其實不多, 後來多數是半自動的.
01:51:34 <monochrom> 其實寫完那篇後, 開始有心完成論文了, 一來反正題目有關, 那篇文是熱身; 二來發覺"原來我是有能力完成巨著..."
01:51:53 <CindyLinz> 好像有點可以體會這種感覺 orz # 01:48 < monochrom> 呵呵呵, 那是一個又未完成博士論文, 又太不上心的無業期. 寫了連續兩個星期哩!
05:42:38 <c9sloud> 聽說 au 以前是 haskell 的 committer
05:43:02 <c9sloud> 有參與過 Haskell \d+ 之類的
05:44:17 <c9sloud> https://ghc.haskell.org/trac/haskell-prime/wiki/Committee  2010 comittee!
05:44:41 <c9sloud> 真是太強了
05:44:46 <c9sloud> 唯一一個台灣人
06:16:03 <c9sloud> > :load Data.List
06:16:05 <lambdabot>  <hint>:1:1: parse error on input ‘:’
06:16:21 <c9sloud> > :type "A"
06:16:22 <lambdabot>  <hint>:1:1: parse error on input ‘:’
06:16:31 <c9sloud> 嘖嘖 不是 ghci 嗎
09:39:01 <c9sloud> pandoc --latex-engine=xelatex doesn't work :(
11:41:18 <CindyLinz> c9sloud: 對 不是 ghci.. XD
11:41:24 <CindyLinz> @t "A"
11:41:24 <lambdabot> Maybe you meant: tell thank you thanks thesaurus thx tic-tac-toe ticker time todo todo-add todo-delete type v @ ? .
11:41:31 <CindyLinz> @type "A"
11:41:32 <lambdabot> [Char]
11:41:48 <CindyLinz> @help
11:41:48 <lambdabot> help <command>. Ask for help for <command>. Try 'list' for all commands
11:41:52 <CindyLinz> @list
11:41:53 <lambdabot> What module?  Try @listmodules for some ideas.
11:42:01 <CindyLinz> @help list
11:42:02 <lambdabot> list [module|command]. Show commands for [module] or the module providing [command].
11:42:04 <c9sloud> @system
11:42:05 <lambdabot> Unknown command, try @list
11:42:08 <c9sloud> @list
11:42:09 <lambdabot> What module?  Try @listmodules for some ideas.
11:42:11 <c9sloud> @listmodules
11:42:11 <lambdabot> activity base bf check compose dice dict djinn dummy elite eval filter free fresh haddock help hoogle instances irc karma localtime more oeis offlineRC pl pointful poll pretty quote search slap source spell system tell ticker todo topic type undo unlambda unmtl version where
11:42:23 <c9sloud> @list activity
11:42:23 <lambdabot> activity provides: activity
11:42:32 <CindyLinz> @help activity
11:42:33 <lambdabot> activity seconds. Find out where/how much the bot is being used
11:42:44 <c9sloud> @activity
11:42:44 <lambdabot> 10*total 10*#haskell.tw
11:42:49 <c9sloud> :-p found
11:42:57 <c9sloud> @base
11:42:58 <lambdabot> Maybe you meant: paste ask
11:43:04 <c9sloud> @karma
11:43:05 <lambdabot> You have a karma of 0
11:43:05 <CindyLinz> @karma
11:43:05 <lambdabot> You have a karma of 8
11:43:07 <CindyLinz> XD
11:43:15 <c9sloud> XDD 有默契 XD
11:43:23 <CindyLinz> @fresh
11:43:24 <lambdabot> Hamp
11:43:30 <c9sloud> @spell
11:43:30 <lambdabot> No word to spell.
11:43:36 <c9sloud> @spell Hey
11:43:37 <lambdabot> Plugin `spell' failed with: aspell: readProcessWithExitCode: runInteractiveProcess: exec: does not exist (No such file or directory)
11:43:49 <c9sloud> ohoh runInteractiveProcess
11:44:16 <CindyLinz> @dice 2
11:44:17 <lambdabot> unexpected end of input: expecting digit, operator or end of input: no rolls in expression
11:44:19 <CindyLinz> @dice
11:44:19 <lambdabot> unexpected end of input: expecting number, "d" or "("
11:44:24 <c9sloud> > r <- createProcess (proc "ls" [])
11:44:25 <lambdabot>  not an expression: ‘r <- createProcess (proc "ls" [])’
11:44:38 <CindyLinz> > createProcess (proc "ls" [])
11:44:40 <lambdabot>  Not in scope: ‘createProcess’Not in scope: ‘proc’
11:45:12 <c9sloud> 可以 import 嗎
11:45:18 <c9sloud> > import System.Process;
11:45:20 <lambdabot>  <hint>:1:1: parse error on input ‘import’
11:45:47 <CindyLinz> 我沒用過 @@"
11:46:14 <c9sloud> 今天用 pandoc 轉 markdown 成功
11:46:19 <c9sloud> ^^
11:46:27 <c9sloud> 還好有人寫了 pandoc tex template
11:46:32 <c9sloud> 用 CJK hack 過了~
11:46:45 <c9sloud> 轉出來的東西很不賴
11:46:48 <CindyLinz> 這個? http://johnmacfarlane.net/pandoc/
11:46:53 <c9sloud> yeahhh
11:46:58 <CindyLinz> 沒有聽過 ._.
11:47:15 <c9sloud> 搭配這個 https://github.com/tef/xetex-pandoc-cjk
11:47:26 <CindyLinz> 把 markdown 變成 tex?
11:47:29 <c9sloud> 可以轉 markdown => pdf , lex, txt, html ... etc
11:47:35 <c9sloud> yeahhhh
11:47:39 <c9sloud> pretty cool
11:47:49 <CindyLinz> 喔喔 看起來 input format 好多種都可以
11:47:49 <c9sloud> 今天早上拿這個來寫 API 文件給廠商 XD
11:47:59 <c9sloud> 最酷的是 haskell 寫的
11:48:02 <CindyLinz> XDDD
11:48:06 <c9sloud> XDDDD
11:48:48 <CindyLinz> Haskell 寫 parser 真的就不需要特別去習慣什麼了 XD
11:49:13 <c9sloud> 最近想寫 FSM 相關的東西
11:49:13 <CindyLinz> 這圖........ww # http://johnmacfarlane.net/pandoc/diagram.png
11:49:21 <c9sloud> 不知道要用 C 還是用 Haskell XDDD
11:49:23 <CindyLinz> c9sloud: 被 XDite 激到喔? XD
11:49:44 <c9sloud> wow 好酷喔
11:49:52 <CindyLinz> c9sloud: 用 perl 嘍~ 把每一條 path 收集起來放在同一個 /.../ 裡面, 以 | 隔開... 就寫完了 XD
11:50:52 <CindyLinz> 啊然後每一個 branch 的尾巴處要放 (?{...CODE...}) 來把對應的 handler 設到一個 global variable 上, match 完以後就可以 goto $handler;
11:52:43 <c9sloud> 沒阿其實兩年前就想做了
11:52:43 <c9sloud> 有跟你說過 idea XDD
11:52:43 <c9sloud> 對呀，我就說 grouped pattern matching 其實比 ruby 跑 state table 快
11:52:43 <c9sloud> XDD
11:52:43 <c9sloud> 我是想寫成 C library
11:52:43 <c9sloud> 然後 PHP 裡面可以用
11:52:43 <c9sloud> 變成一個 persistent structure
11:52:43 <c9sloud> 主要是想說用 C 寫 fsm 的話說不定可以比 regular expression 快，有些簡單的地方可以特化
11:52:44 <c9sloud> CindyLinz: 恩恩我在 PHP 裡面 preg_match 沒有 (?{...CODE...}) 可以用 XDD
11:52:44 <c9sloud> 所以我用作假的 chunked groups
11:52:44 <c9sloud> XD
11:53:03 <c9sloud> 做 padding
11:53:23 <cataska> 寫成 C library 會不會最後被說不公平呢 *flee*
11:53:37 <c9sloud> XDDDDDDDDDDDDD
11:53:55 <c9sloud> 這種的就不想理他 XDD
11:54:00 <CindyLinz> 咦.. 給 PHP 用?  所以要包成 PHP native 喔?
11:54:01 <c9sloud> 反正是為了好玩
11:54:05 <c9sloud> 來實驗看看
11:54:17 <c9sloud> 恩恩 先做成 C library 然後用 php linking 近來
11:55:07 <CindyLinz> 如果要衝效能的話那還是選 C 吧.. 因為你不是整個程式都 Haskell 寫.. 每一次都要進出 Haskell 的 runtime 有點傷....
11:56:05 <CindyLinz> 但如果是要跟人家拼 code 短的話, 而且 glue 的部分不算的話, Haskell 很好用 XD
11:57:33 <c9sloud> 如果效果不錯的話，說不定其他語言也可以 binding 來用
11:57:34 <c9sloud> 恩恩恩
11:57:34 <c9sloud> https://github.com/c9s/r2 兩年前寫的東西砍掉重練 XD
11:57:34 <c9sloud> 真的~~~~
11:58:33 <c9sloud> 有 pattern matching + guard expression 寫出來的東西超簡潔乾淨的
11:58:35 <CindyLinz> hmm.... 其實覺得跟 PHP 比, C 的 code 不見得會比較長說 @@"   不過如果加上完整的 error checking 的話, C 就超長了....ww
11:58:47 <c9sloud> 真是厲害
11:58:54 <c9sloud> C 一定長的 XDD
11:58:58 <CindyLinz> 用 C 寫的話, 應該可以用 perl 寫給 C 的 pcre lib?
11:58:59 <c9sloud> 還要寫 header file XDD
11:59:10 <c9sloud> yeah!
11:59:12 <c9sloud> libpcre
11:59:23 <CindyLinz> 可惜 FSM 就沒玩到了 XD
11:59:31 <c9sloud> 要 support full feature 的 re 應該還是會用 libpcre (partial)
12:00:13 <c9sloud> 現在的想法是  /path/foo/bar 進來，用 slash 切成 char*
12:00:30 <c9sloud> 所以每次比對的是一個 chunk 而不是 char
12:00:49 <c9sloud> 所以假設我有 N 的字元，就不一定要 transite N 次
12:00:53 <CindyLinz> 後面那個 foo 和 bar 是 capture 的 id?
12:01:02 <c9sloud> yeah 也可以是
12:01:12 <c9sloud> 如果他是 slug 的話
12:01:20 <CindyLinz> 如果也是路徑的一部分的話, 應該跟前面的 /path/ 接起來比較省吧?
12:01:22 <c9sloud> 就是用 C 寫一個很簡單的 [^/]+
12:01:30 <c9sloud> 對
12:01:31 <CindyLinz> 喔不過生成 FSM 以後其實都沒差了 XD
12:02:02 <CindyLinz> 不過 pcre 的 left bias 特性, 不知道會不會讓 FSM 的優化比較差 @@"
12:02:03 <c9sloud> 先切出來之後把每個 routes 的 states merge 起來之後
12:02:15 <c9sloud> 再做 reduce
12:03:06 <CindyLinz> pcre 可以讓我們摸到生出來的 state 嗎?
12:03:24 <c9sloud> 應該可以，可是這樣實作會變成太複雜了
12:03:44 <CindyLinz> 不知道 /aaaaa|aaaab/ 能不能變成 /aaaa(?:a|b)/ @@"
12:03:46 <c9sloud> 我的想法是遇到 re 的 slug 才用 regular expression match
12:03:53 <CindyLinz> slug 是什麼啊?
12:04:17 <c9sloud> 類似這樣的 pattern:    /blog/post/{id}/{title}  <=
12:04:45 <c9sloud> 這是照某個 URI rfc 的 syntax 寫的... {id} 如果沒有指定 re 的話，預設就是用 [^/]+
12:04:59 <CindyLinz> 喔喔~~
12:05:22 <c9sloud> 所以沒有 re 的地方可以用 char compare :p
12:05:44 <c9sloud> 因為通常 route 不會在第一個字元就用 re
12:05:53 <CindyLinz> 那個 {id} 裡面如果有指定 regex 的話, 它是 check 性質的, 還是 match 性質的? 如果 regex 比對失敗, 是 route 失敗, 還是會去試下一條?
12:05:53 <c9sloud> 通常都是先來個 prefix 才寫 slug
12:06:23 <c9sloud> 還沒決定，還在想 XD
12:07:07 <c9sloud> 不過我覺得你講的狀況是相同 path 但不同 regex ?
12:07:18 <CindyLinz> 對
12:07:21 <c9sloud> 那應該就是變成兩個 state
12:07:32 <c9sloud> 分岔去走
12:07:50 <c9sloud> 應該是你說 check 性質的
12:07:50 <CindyLinz> /blog/post/{id:\d+}  和 /blog/post/{id2:-\d+}
12:08:12 <CindyLinz> 那 routing 的部分完全不用 regex 嘛 XD
12:09:14 <c9sloud> combine re 的話我覺得可以，但是初期來不考慮
12:09:18 <c9sloud> 不然怕生不出來
12:09:38 <CindyLinz> 那我想 routing 的部分可能最有效率的是 suffix tree?
12:10:48 <c9sloud> O (n log n) 好像不賴 XD
12:10:50 <c9sloud> yeah
12:10:54 <c9sloud> that's right
12:11:46 <c9sloud> worst-case running n log n
12:11:58 <CindyLinz> 欸... suffix tree 應該是 O(N) 才對?
12:13:27 <c9sloud> CindyLinz: Suffix Tree 就是 Trie ?
12:14:55 <c9sloud> Rails 好像打算用 Ruby 寫一個 Trie 來換掉..昨天看到的
12:15:43 <c9sloud> 我去買吃的 XD
12:15:46 <CindyLinz> 不是 trie
12:16:40 <CindyLinz> 是 hil 教授上演算法時超愛教的東西 XD
12:24:29 <c9sloud> Hil ?
12:28:47 <monochrom> 而我超愛用遞歸 :)
12:30:26 <c9sloud> CindyLinz:  教我教我
12:30:45 <monochrom> 遞歸算法超容易證明正確 :)
12:36:32 <c9sloud> @module +Data.Char
12:36:33 <lambdabot> Unknown command, try @list
12:36:52 <c9sloud> QQ
12:37:18 <c9sloud> > length "foo"
12:37:20 <lambdabot>  3
12:38:37 <c9sloud> > let capCount = length . filter (isUpper . head) . words
12:38:39 <lambdabot>  not an expression: ‘let capCount = length . filter (isUpper . head) . words’
12:39:11 <c9sloud> 好像一定要 expression
12:57:39 <monochrom> let ... = ... in ... 才是 expression
13:02:42 <c9sloud> 恩恩恩
13:03:24 <c9sloud> > let capCount = length . filter (isUpper . head) . words in capCount "foo bar zoo"
13:03:25 <lambdabot>  0
13:06:03 <c9sloud> 用 Suffix tree 好像有道理耶
13:06:47 <c9sloud> 但如果多個 routes 都是 ends with \d+
13:07:05 <c9sloud> 就是 worst case ?
13:07:35 <c9sloud> 但這樣要解決 optional slug 的問題
13:08:16 <c9sloud> 也許就乾脆不考慮了 XD
13:09:23 <c9sloud>  Maybe 可以在 compile 的時候統計分析一下 patterns
13:12:52 <CindyLinz> c9sloud: 欸? suffix tree 應該沒有什麼 best case / worse case 的差異啊 @@"
13:13:40 <CindyLinz> 我找一下..
13:13:54 <CindyLinz> c9sloud: 然後... 本 channel 大寫的 Maybe 是關鍵字喔~ (逃)
13:14:26 <c9sloud> Nothing 呢 XDDD
13:15:05 <CindyLinz> 也是歐 XD
13:17:27 <CindyLinz> c9sloud: http://www.csie.ntu.edu.tw/~hil/algo2006fall/2007spring-algo08.ppt
13:17:34 <CindyLinz> 前面是 suffix trie, 後面是 suffix tree
13:23:37 <CindyLinz> 雖然是一段還有點長度的無點流, 不過這一段還蠻好讀的 ^^ # 13:03 < c9sloud> > let capCount = length . filter (isUpper . head) . words in capCount "foo bar zoo"
13:40:16 <c9sloud> 原來有分 tree / trie .. XD
13:40:52 <c9sloud> 後來覺得應該用 expre .. where ... = ... 比較好讀 ?
13:41:15 <c9sloud> expr where ... = ... 哪一種比較常用?
13:41:24 <CindyLinz> 如果演算法的主幹清楚的話, where 比較好讀
13:42:05 <CindyLinz> 然後我也比較喜歡 where, 因為通常是主幹會比較「深」, 而 let in 的寫法會比 where 的寫法在主幹的部分多一個縮排
13:42:23 <CindyLinz> 但是, let in 能用的地方 where 不一定能用; where 能用的地方 let in 一定能用 :Q
13:43:29 <CindyLinz> 例如說用 guard expr 的時候, where 一定會罩到所有的 guard expr 的 branch; 想要只罩一個 branch 的話, 只能用 let in..
13:43:44 <c9sloud> soga
13:43:49 <CindyLinz> 為了搞清楚這個還跑去翻 Haskell syntax... orz
13:43:58 <c9sloud> CindyLinz++
13:44:16 <c9sloud> 那有沒有 let go XD
13:44:36 <CindyLinz> 如果常用 let in 的話, 應該會常常有 let go 出現喔.. XD
13:45:08 <c9sloud> XD
13:45:28 <CindyLinz> 可能是寫一個遞迴的東西, 而有的參數對整個遞迴的過程來說是常數
13:45:53 <CindyLinz> 那就會在裡面定義一個 go, 然後在 go 裡面直接使用這個像常數一樣的參數, 而不用每一層遞迴的時候都傳一次
13:45:57 <c9sloud> oic~
13:46:07 <CindyLinz> 只是我比較常寫 go where...
13:46:19 <CindyLinz> f n = go where go = .....
13:46:22 <c9sloud> 所以還真的有 let go XDDD
13:46:35 <CindyLinz> 啊不然你以為我 FB 那篇怎麼會想到 XD
13:46:50 <c9sloud> 那時還沒有參透 XD
13:47:11 <c9sloud> 最近通勤的時候都拿 RWH 出來重新讀
13:47:14 <c9sloud> 之前都忘光了
13:47:28 <CindyLinz> mmmm
13:47:46 <c9sloud> 話說.. 讀到現在 我覺得 Haskell 比 Perl 適合拿來做 bioinformatics ?
13:47:47 <CindyLinz> 你的話.... 非常推荐 Begining Haskell
13:48:06 <CindyLinz> Haskell 寫字串比對沒有 perl 方便啊 @@"
13:48:13 <c9sloud> 是喔
13:48:18 <c9sloud> 嘖嘖
13:48:26 <CindyLinz> 但我不知道 bioinfo 現在主要在做什麼了 :Q
13:48:31 <c9sloud> 我現在重新讀到 Writing JSON library
13:48:45 <c9sloud> DNA 序列比對好像挺適合?
13:48:49 <CindyLinz> 複雜的 parser 用 Haskell 是不錯
13:49:10 <CindyLinz> perl 雖然是理論上寫得出來, 可是感覺沒有 Haskell 那麼心安
13:49:32 <c9sloud> 恩恩 對 有 type 還是比較有安全感 (羞)
13:49:33 <CindyLinz> 我是說那個 (?-2) 的 perl 巢狀 regex.. XD
13:49:45 <c9sloud> XD (倒)
13:49:56 <CindyLinz> 那個寫複雜了... 一眼看去真的很難知道有沒有寫漏 :Q
13:56:22 <c9sloud> 是時候寫 DSL 了 XD
13:56:32 <c9sloud> (?-2) 專用的 DSL
13:56:59 <CindyLinz> 這時候還是寫 Haskell 好了 :Q
13:57:04 <c9sloud> hhahaha
13:57:47 <c9sloud> 話說...昨天回 xdite 那串突然十幾個人來追蹤我是怎麼回事 XDDD
13:58:19 <CindyLinz> 那十幾個人看起來像是 xdite 粉還是 xdite 憤啊?
13:58:45 <CindyLinz> 畢竟你的發言內容像在嗆 xdite?
13:59:31 <c9sloud> 有嗎 XDDDDDD
14:00:45 <c9sloud> 其實我本來以為 arel 真的這麼神，有 compiler 可以 optimize SQL expression
14:01:11 <CindyLinz> 結果只有 optimize ORM 製造出來的問題 @@"
14:01:17 <c9sloud> 心中還蠻佩服的.. 結果昨天花了十分鐘翻 arel 的 code.. 沒看到什麼特別的東西.. 有點小失落
14:01:53 <c9sloud> 想說是不是我看錯了，又去翻了 doc
14:01:59 <CindyLinz> 我只有翻 README.. 厚, 也是被騙了.... QQ
14:02:15 <c9sloud> 看到 "Simplifies the generation of complex SQL queries" 這段，所以猜想應該是有人誤會了 XD
14:02:33 <c9sloud> which means "Simplifies the generation" not the query XDDDD
14:03:33 <c9sloud> 不過後來想想，如果真的有 ORM 做這種 optimization 我應該會蠻怕的
14:03:54 <CindyLinz> 怕?
14:04:09 <c9sloud> 恩恩 因為他只看得到 syntax 呀
14:04:23 <c9sloud> 看不到我 db 裡面 data 到底是怎麼樣
14:04:27 <CindyLinz> 也可以去看 DB 啊 @@"
14:04:45 <c9sloud> 好吧 如果做到極致的話好像也是 XDD
14:04:56 <CindyLinz> postgres 可以隨時翻分析資料出來耶~
14:05:23 <c9sloud> 但 mysql 底層也有做 optimizer 這樣多做一層不知道是不是重工
14:05:36 <CindyLinz> 所以我原本覺得理論上可行, 所以以為他有做...... QQ
14:06:08 <c9sloud> me too.... QQ
14:07:15 <CindyLinz> Arel 如果有做的話, 好處是比較靜態... 因為 MySQL 對於每一個進來的 query 都要當作第一次看到去作處理, 重新預測
14:07:41 <c9sloud> 最近同時也在讀 high performance mysql, 才知道 InnoDB 做的 optimization 真的超多的
14:07:41 <c9sloud> 話說若 read only + in memory 的話很適合用 MyISAM engine
14:07:52 <CindyLinz> 除非用 prepare 那種用法.. 但是至少我實作 MySQL socket protocol 的時候有發現, mysql 的 prepare 是跟著 connection 走的, 所以換一個 connection 就要重來
14:08:44 <CindyLinz> 另外, 我拿 perl DBI 的 DBD::mysql 作為 reference implementation 的時候, 發現它的 prepare 是假的..... 只是把部分的 SQL 先存在 perl side, execute 的時候才直接拼出完整 SQL 去執行....ww
14:09:01 <c9sloud> 喔喔 可是不是有 mysql query cache?
14:09:02 <CindyLinz> 結果我的 AnyEvent::MySQL 的 prepare 就只好自己摸黑寫了..
14:09:13 <c9sloud> 你是說 write query 嗎?
14:09:29 <c9sloud> select 的 query cache 好像是跨 connection
14:09:43 <c9sloud> DBD::mysql 欺騙消費者阿 XDD
14:09:48 <CindyLinz> 我說的是 prepare 呀~ 可以丟一個長得像 "select name from users where id=?" 這種有洞的 query 給 MySQL
14:10:04 <c9sloud> 哦哦哦
14:10:08 <CindyLinz> 他會給你一個 handler, 以後就可以拿這個 handler 補洞以後執行, 這個 handler 可以重複使用
14:10:12 <c9sloud> maybe DBD 沒有 update ?
14:10:21 <c9sloud> DBD implementation 沒 update?
14:10:41 <CindyLinz> 我實作 AnyEvent::MySQL 的時候 DBD::mysql 的 prepare 還是假的 XD
14:10:49 <CindyLinz> 後來沒關心了 ^^|
14:11:20 <CindyLinz> 只是說.. 也會懷疑別的語言的 client 也是亂做... XD
14:11:48 <c9sloud> 咦找到了
14:11:49 <c9sloud> Before MySQL 5.1.17, prepared statements do not use the query cache. Beginning with 5.1.17, prepared statements use the query cache under certain conditions, which differ depending on the preparation method:
14:12:12 <c9sloud> 所以如果你是 5.1.17+ 的話應該是 under certain conditions
14:12:13 <CindyLinz> 那... 如果 Arel 有作個分析什麼的, 能把分析結果存下來就可能有好處了..
14:12:32 <c9sloud> 這個收起來以後仔細讀讀看
14:12:37 <c9sloud> 恩恩 對
14:12:39 <CindyLinz> 前提是有真的用到 prepare 吧... DBD::mysql 那個就一定沒有了 XD
14:12:51 <c9sloud> 要做分析的話應該不難，它都有 AST 了
14:13:03 <c9sloud> 話說我最近也看到一個很 crazy 的實作... In PHP
14:13:04 <c9sloud> XD
14:13:04 <CindyLinz> 要分析 key 的長相和資料分佈
14:14:24 <c9sloud> https://github.com/TimeToogo/Penumbra/tree/dev/Source/Pinq
14:15:26 <c9sloud> 這也是類似 Arel 的實作 XD
14:15:33 <c9sloud> 不過這個比較威
14:15:38 <CindyLinz> 可是我也討厭 ORM 啊 @_@"
14:15:40 <c9sloud> 因為還自己寫 PHP Syntax Parser XDD
14:15:50 <c9sloud> yeah that's totally crazy XDDD
14:16:29 <CindyLinz> 它 parse 誰啊?
14:16:45 <c9sloud> 自己
14:16:50 <c9sloud> for example...
14:17:15 <c9sloud> $posts->GroupBy(function($Posts) { return $Posts->author_id; });
14:17:26 <c9sloud> 它實際上是一個假的 closure
14:17:36 <c9sloud> 因為 PHP 裡面可以用 Reflection 拿到這個 closure 的 code
14:17:47 <c9sloud> 所以他就用 PHP Parser 去 parse 這個 closure 的 code
14:18:03 <c9sloud> Arel 也還只是用 Ruby object 去模擬而已
14:18:14 <c9sloud> 相較來說這個根本是太 crazy 了
14:18:26 <CindyLinz> 回想以前我用 ORM 的經驗... 就是...
14:18:30 <c9sloud> XDD
14:18:39 <c9sloud> CindyLinz: 該不會是我那套吧 XD
14:18:41 <CindyLinz> 寫著寫著, 就會找出類似 literal expr 的功能, 把我要的 SQL 直接寫進去
14:18:45 <CindyLinz> c9sloud: 更久以前
14:19:06 <CindyLinz> 然後就很生氣, 我要這東西幹嘛... orz
14:19:35 <c9sloud> 拿來做很多 table 的 CRUD 呀
14:19:52 <c9sloud> XDD
14:20:01 <CindyLinz> 可是那都不是難寫的部分啊...
14:20:40 <c9sloud> 但寫起來很累 XD
14:20:52 <c9sloud> 還記得某 d* 案子的嗎
14:21:01 <c9sloud> 我本來想說 go 還是寫 plain SQL ..
14:21:12 <c9sloud> 到後面我寫到要吐了 XDDDD
14:22:01 <c9sloud> > data Trie a = Trie { value    :: Maybe a,   children :: Map Char (Trie a) }
14:22:02 <lambdabot>  <hint>:1:1: parse error on input ‘data’
14:22:06 <c9sloud> QQ
14:22:12 <CindyLinz> SQL 有這麼毒口嗎.... XD   還是因為我們家常常直接寫 SQL, 被毒到手都麻弊沒感覺了 XD
14:22:31 <CindyLinz> 我不知道要怎麼在 ghci 或 lambdabot 裡面定義 data type @@"
14:23:26 <c9sloud> ghci 可以直接 data type
14:23:34 <c9sloud> lambdabot 好像不行
14:23:53 <CindyLinz> 噢
14:24:09 <c9sloud> CindyLinz: 其實有用有差... 而且差很多 XDD
14:24:32 <c9sloud> 我最先幾年做案子都是直接下 SQL..
14:24:45 <c9sloud> 但是客戶一定會要加東改西的
14:24:56 <c9sloud> 加了又拿掉，拿了又再加
14:24:57 <CindyLinz> 我承認我會用函數把 SQL 包起來啦 XD
14:25:08 <CindyLinz> 例如說 function get_user($id){}  這種的
14:25:20 <c9sloud> 有時候 code 跟 db 裡面的東西不一致的時候就會 db query error
14:25:49 <c9sloud> 後來就想說還是得要有個東西 可以提高一致性 (就弄一些基本 CRUD methods)
14:25:54 <c9sloud> 再後來
14:26:01 <CindyLinz> 不會讓 SQL 跟主幹邏輯纏一起 ^^|
14:26:09 <c9sloud> 有時候手動下alter table ...
14:26:25 <c9sloud> production 上面少跑了跑個 alter
14:26:30 <c9sloud> 就會爆掉 XD
14:26:53 <c9sloud> 於是就又加上了一個程式可以把 schema 跟 db table 去比對
14:26:59 <c9sloud> 然後自動 alter
14:27:12 <c9sloud> 到後來越加越多就變完整的 ORM 了 XD
14:27:40 <CindyLinz> @____@"
14:27:41 <lambdabot> Unknown command, try @list
14:27:44 <c9sloud> 但我是覺得如果只需要專心做幾個產品，都下 SQL 倒是無妨
14:27:54 <c9sloud> hahaha
14:27:56 <c9sloud> @@
14:28:02 <CindyLinz> @@ 這樣啦 XD
14:28:03 <lambdabot>  這樣啦 XD
14:28:12 <c9sloud> @@ 還有這樣的喔
14:28:13 <lambdabot>  還有這樣的喔
14:28:43 <CindyLinz> 我讀 yesod 的時候有看到他講了一個我想起來也覺得可能是不錯的 ORM 會有的功能
14:28:56 <CindyLinz> 就是可以寫「半個 query」, 給別人組裝
14:29:24 <CindyLinz> 只是如果是「真．ORM」的話, 這邊的「半個 query」通常只能是「前半個 query」
14:29:49 <c9sloud> oh 對這點我也有考慮進去
14:29:49 <CindyLinz> 因為 ORM 的寫法, 一定是從一個物件出發, 一路往後放 .
14:30:02 <CindyLinz> 如果截一個中段出來, 是壞的 @@"
14:30:18 <c9sloud> 恩恩
14:30:19 <c9sloud> yeah
14:30:30 <CindyLinz> 但當然因為 yesod 是 Haskell, 所以這邊比較過份一點....
14:30:57 <CindyLinz> 然後我看過的 ORM 的 tutorial 也都沒有強調這件事...
14:31:35 <c9sloud> 同意 XD
14:31:59 <c9sloud> 不過我記得像 Jifty::DBI 有:   load_query("...............")
14:32:09 <c9sloud> 你可以下整個手寫 SQL 轉成 model objects
14:32:54 <c9sloud> ghci 裡面要怎麼 define function 呢 @@?
14:33:04 <CindyLinz> 然後對於權限外漏的部分, 曾經我以為 ORM 可以處理好... 不過後來發現 ORM 能保護到的範圍和一個 SQL parser 是一樣的
14:33:15 <CindyLinz> 所以還是不能無腦保護 ._.
14:33:39 <CindyLinz> ghci 如果要定義可以一直重複用的函數, 直接用 let f = .... 後面不加 in
14:33:56 <c9sloud> 權限外露?
14:34:03 <CindyLinz> 把它想像成在 monad 的 do block 裡面一樣
14:34:14 <CindyLinz> 我那時在想 pgrest 那樣的東西 ^^
14:34:27 <CindyLinz> 如果 pgrest 直接給使用者的 javascript 摸的話
14:35:46 <c9sloud> 所以 ghci 只能 define lambda ?
14:36:23 <CindyLinz> 沒有啊, 可以寫 let f a = a   XD
14:36:42 <CindyLinz> 不過如果有好幾條 pattern 的話我不確定 @@"
14:37:09 <CindyLinz> 我猜要寫在同一條 let 裡面, 那可以用 :{ :} 來換行, 或是寫在同一行用 ; 隔開吧
14:37:36 <c9sloud> 如果要寫 signature 的話好像一定得用 ; 一起寫進去才行
14:37:43 <c9sloud> > let numUniques' :: (Eq a) => [a] -> Int; numUniques' = length . nub
14:37:45 <lambdabot>  not an expression: ‘let numUniques' :: (Eq a) => [a] -> Int; numUniques' = l...
14:38:48 <CindyLinz> 對耶.. 我沒有考慮過 signature 和 definition 正常一定要在不同行 :p
14:39:18 <CindyLinz> 要不然他怎麼判斷尾巴是一個 Int 還是 Int f 呢
16:22:01 <CindyLinz> 拿 case xxxx of ooooo 來當某種 let ooooo = xxxx in 用, 有三個差別..
16:22:25 <CindyLinz> * case of 可以用同名的, ooooo 那邊的名字會 shadow 掉 xxxx 裡面的, 不會有 recursive 的效果
16:22:43 <CindyLinz> * case of 的用法可以在後面用寫一整排 guard expr
16:23:03 <CindyLinz> * case of 如果要一次定義一整排東西的話, 沒有 let in 清楚....
16:23:35 <godfat> 聽起來 let in 的彈性大很多
16:23:35 <godfat> 另外 case of 就某方面而言是 strict 的？
16:23:55 <CindyLinz> 可是有時候我是故意想 shadow 掉前面的東西 XD
16:24:03 <godfat> = =...
16:24:30 <CindyLinz> 然後 guard expr 拿來作 N-way branch 很方便啊~~
16:25:24 <CindyLinz> strict 還是不會有.. 如果我只有放一個 branch, 而且都是拿變數直接接的話, 不會解出東西
16:34:05 <CindyLinz> 啊, 然後可以再配合 GHC 的 pattern guard extension 在 guard expr 裡面寫 pattern matchitg (Y)
16:51:51 <mno2> http://stackoverflow.com/questions/2573135/python-progression-path-from-apprentice-to-guru/2576240#2576240 第 7 點是啥鬼 lol
16:56:36 <CindyLinz> 偷渡啦 XD
16:57:09 <CindyLinz> 10. Rediscover the Strategy pattern and then all those things from imperative code you tried so hard to forget after Haskell.
16:57:41 <CindyLinz> 其實這一句看不懂 orz
17:33:32 <godfat> 因為盡量不要測試 bool condition?
17:33:32 <godfat> http://existentialtype.wordpress.com/2011/03/15/boolean-blindness/
17:35:26 <godfat> 應該是因為他是物件導向支持者吧？
17:35:33 <godfat> 我說剛剛那個 10
17:36:16 <godfat> 或是說很多東西在 python 裡太難做了，只好回到 the old python way
17:37:24 <CindyLinz> 我發現那句英文我不會斷句 orz
17:38:14 <CindyLinz> 所以他是說... 7~9 的時候他從 Haskell 學了很多東西, 想弄出 python 版實作
17:38:33 <CindyLinz> 到 10 的時候體會到這太逆天了, python 還是該有 python 的樣子?
17:39:34 <godfat> 我是這樣想的
17:39:57 <CindyLinz> 嗯嗯嗯
17:40:34 <godfat> CindyLinz, case 跟 strict 那個可否舉個例子？這邊說實在我一直有點困惑 @@
17:41:13 <CindyLinz> 好~~
17:42:37 <CindyLinz> > case (undefined, undefined, 3) of (a, b, c) -> show c
17:42:39 <lambdabot>  "3"
17:43:06 <CindyLinz> a 和 b 沒有被 strict 掉, 除非我有要求 a 那邊寫成 Just a 之類的
17:43:09 <CindyLinz> > case (undefined, undefined, 3) of (Just a, b, c) -> show c
17:43:12 <lambdabot>  "*Exception: Prelude.undefined
17:43:56 <CindyLinz> 就.. GHC 很懶, 他真要算的時候, 也只會算到剛好夠判斷要走哪一條 branch 就不幹了 XD
17:45:27 <CindyLinz> 唔.. 可是為什麼 lambdabot 這邊還是有印出一個 " 呢? 是因為我這一組 case 裡面只有一個 branch 嗎? 不然他應該還不能確定會走進這個 show 吧 @@"
17:46:18 <CindyLinz> > case (undefined, undefined, 3) of (Just a, b, c) -> c
17:46:20 <lambdabot>  *Exception: Prelude.undefined
17:47:02 <b4283> > case (undefined, 3) of (_, c) -> c
17:47:03 <CindyLinz> 看起來是要取 c 的時候才去解 Just a = undefined @@"
17:47:03 <lambdabot>  3
17:47:12 <b4283> > case (undefined, 3) of (_, c) -> show c
17:47:14 <lambdabot>  "3"
17:48:14 <CindyLinz> > case (undefined, undefined, "3") of (Just a, b, c) -> show c ; (Nothing, b, c) -> c
17:48:15 <lambdabot>  "*Exception: Prelude.undefined
17:48:21 <CindyLinz> > case (undefined, undefined, "3") of (Just a, b, c) -> c ; (Nothing, b, c) -> show c
17:48:22 <lambdabot>  "*Exception: Prelude.undefined
17:48:41 <CindyLinz> > case (Just undefined, undefined, "3") of (Just a, b, c) -> c ; (Nothing, b, c) -> show c
17:48:43 <lambdabot>  "3"
17:48:59 <CindyLinz> > case (Nothing, undefined, "3") of (Just a, b, c) -> c ; (Nothing, b, c) -> show c
17:49:01 <lambdabot>  can't find file: L.hs
17:49:12 <b4283> 啥
17:49:13 <CindyLinz> 這啥情況 XD
17:49:18 <CindyLinz> > case (Nothing, undefined, "3") of (Just a, b, c) -> c ; (Nothing, b, c) -> show c
17:49:20 <lambdabot>  "\"3\""
18:00:36 <godfat> > case undefined of () -> 1
18:00:37 <lambdabot>  *Exception: Prelude.undefined
18:01:00 <CindyLinz> () 是 constructor 所以就被解出來了
18:01:47 <godfat> > let () = undefined in 1
18:01:48 <lambdabot>  1
18:02:06 <godfat> 不過這應該不一樣..
18:02:12 <CindyLinz> godfat: 對應的 case 寫法應該是:
18:02:31 <CindyLinz> 寫不出來 XD
18:02:39 <CindyLinz> 不對啦, 我是要 bind 變數啊~~
18:02:46 <godfat> > let f () = 1 in f undefined
18:02:48 <lambdabot>  *Exception: Prelude.undefined
18:05:03 <godfat> ok, 所以我猜.. case of 跟 let in 這邊其實是一樣的，應該說 pattern match 本身會是 strict 的。不過也是，不然他要怎麼知道走什麼 branch? 畢竟這邊 f 是 partial function...
18:06:18 <CindyLinz> 看起來 lambdabot 還是會知道.... orz
18:07:10 <CindyLinz> ghci 也是會提前噴出那個 " 才噴 undefined @@"
18:08:13 <godfat> 唔？我 ghci 執行起來跟 lambdabot 一樣
18:09:28 <CindyLinz> 等 monochrom 來教學好了 ._.
18:09:47 <godfat> XD~
18:10:30 <godfat> 會有這個疑問最早是來自 IO monad 到底從哪裡開始產生連鎖反應的？
18:12:09 <CindyLinz> ??
18:12:25 <CindyLinz> 沒有啊 是看到 lambdabot 行為不合我預期開始的啊 XD
18:13:44 <CindyLinz> 直接寫 .hs 檔然後用 runghc 來跑的話, 倒是測不出這種東西就是了 @@"
18:13:44 <godfat> 喔，我是說我啦 XD
18:13:45 <godfat> 你原本預期看到什麼？
18:14:12 <CindyLinz> 我預期... case (undefined, 2) of (Just a, b) -> b 和case (undefined, 2) of (Just a, b) -> show b 要一樣
18:14:56 <CindyLinz> 在 .hs 檔裡面的話, 這樣寫什麼都不會印, 而如果在裡面寫 putStrLn $ show ... 也是什麼都沒出來, 只看到 exception
18:15:15 <CindyLinz> 所以我猜是因為這種 pure expression 被 ghc 任意 optimize 了
18:15:23 <godfat> runhaskell 我跑 main = let f () = return 1 in f undefined 是可以
18:15:42 <CindyLinz> 真恐怖 XD
18:16:13 <CindyLinz> 也許 undefined 的處理方式是 undefined.. XD
18:16:29 <CindyLinz> 還好我是沒有拿 undefined 的 behavior 做事 XD
18:17:57 <godfat> > case (undefined, 2) of (Just a, b) -> show b
18:17:59 <lambdabot>  "*Exception: Prelude.undefined
18:18:05 <godfat> > case (undefined, 2) of (Just a, b) -> b
18:18:06 <lambdabot>  *Exception: Prelude.undefined
18:19:13 <godfat> 我寫在 .hs 裡也是 exception?
18:48:18 <c9sloud> 有推薦的 haskell 的 vim plugin 嗎
18:49:01 <godfat> 我沒有特別用什麼 @@
18:49:25 <c9sloud> Completion?
18:50:07 <godfat> 只能說我不會 vim 了 XDD
19:05:29 <poga> godfat: 那... sublime 的 haskell plugin 也推薦一下吧 XD
19:06:42 <godfat> 嗚嗚，我沒有針對某個語言的，不過有灌以下外掛：
19:06:42 <godfat> 等等，我要怎麼看啊？ XD
19:07:31 <godfat> Alternative Autocompletion.sublime-package
19:07:32 <godfat> GitGutter.sublime-package
19:07:32 <godfat> LLVM.sublime-package
19:07:32 <godfat> LiveScript.sublime-package
19:07:32 <godfat> PyV8
19:28:13 <poga> 好簡潔 XD
19:29:10 <godfat> 我沒啥需求 @@" 或是說大抵上編輯器裡都有了..
19:59:35 <CindyLinz> 我覺得... 在 c9sloud 面前敢說會用 vim 的不多... XD
19:59:52 <CindyLinz> 我認識 c9sloud 就是因為去聽他開的 vim script 課.... ._.
20:06:03 <c9sloud> XDDDD 沒這麼誇張啦
20:50:57 <c9sloud> > foldr (++) ["foo","bar]
20:50:58 <lambdabot>  <hint>:1:24:
20:50:58 <lambdabot>      lexical error in string/character literal at end of input
20:51:25 <c9sloud> > foldr (++) "foobar"
20:51:26 <lambdabot>  <[[Char]] -> [Char]>
20:51:36 <CindyLinz> c9sloud: 你少給初值
20:51:50 <c9sloud> Ohoh?
20:52:11 <CindyLinz> @type foldr
20:52:13 <lambdabot> (a -> b -> b) -> b -> [a] -> b
20:52:20 <c9sloud> Ah!
20:52:55 <CindyLinz> @type fold1
20:52:56 <lambdabot>     Not in scope: ‘fold1’
20:52:57 <lambdabot>     Perhaps you meant one of these:
20:52:57 <lambdabot>       ‘foldl1’ (imported from Data.List),
20:52:58 <CindyLinz> @type foldr1
20:52:59 <lambdabot> (a -> a -> a) -> [a] -> a
20:53:08 <c9sloud> > foldr (++) "" "foobar"
20:53:09 <lambdabot>  Couldn't match type ‘GHC.Types.Char’ with ‘[GHC.Types.Char]’
20:53:10 <lambdabot>  Expected type: [[GHC.Types.Char]]
20:53:10 <lambdabot>    Actual type: [GHC.Types.Char]
20:53:12 <CindyLinz> 不用初值的版本 :p
20:54:08 <c9sloud> > foldr (++) 'a' "abcdef"
20:54:09 <lambdabot>  Couldn't match expected type ‘[a]’
20:54:10 <lambdabot>              with actual type ‘GHC.Types.Char’Couldn't match type ‘GHC.Types....
20:54:10 <lambdabot>  Expected type: [[a]]
20:54:10 <lambdabot>    Actual type: [GHC.Types.Char]
20:54:37 <CindyLinz> @type (++)
20:54:39 <lambdabot> [a] -> [a] -> [a]
20:54:44 <c9sloud> 好像少 []
20:54:45 <CindyLinz> 不能用在字元
20:54:52 <c9sloud> soga
20:58:58 <c9sloud> > foldr (+) 0 [1,2,3,4,5]
20:58:59 <lambdabot>  15
20:59:12 <c9sloud> yada
21:00:00 <c9sloud> > foldr (+) 0 [1..100000]
21:00:02 <lambdabot>  5000050000
21:00:15 <CindyLinz> 應該快爆了.. (思)
21:02:32 <c9sloud> > foldr (+) 0 [1..99999999]
21:02:37 <lambdabot>  mueval-core: Time limit exceeded
21:02:38 <lambdabot>  mueval: ExitFailure 1
21:02:50 <c9sloud> xD
21:03:03 <c9sloud> > foldr'
21:03:04 <lambdabot>  Not in scope: ‘foldr'’
21:03:05 <lambdabot>  Perhaps you meant one of these:
21:03:05 <lambdabot>    ‘BS.foldr'’ (imported from Data.ByteString),
21:03:05 <lambdabot>    ‘F.foldr'’ (imported from Data.Foldable),
21:03:05 <lambdabot>    ‘IS.foldr'’ (imported from Data.IntSet)
21:03:35 <c9sloud> @type fold'
21:03:36 <lambdabot>     Not in scope: ‘fold'’
21:03:37 <lambdabot>     Perhaps you meant one of these:
21:03:37 <lambdabot>       ‘foldr’ (imported from Data.List),
21:04:05 <c9sloud> 咦我以為有 foldr' ? Safer version?
21:05:58 <CindyLinz> strict version?
21:07:38 <CindyLinz> @src foldl
21:07:39 <lambdabot> foldl f z []     = z
21:07:39 <lambdabot> foldl f z (x:xs) = foldl f (f z x) xs
21:07:40 <CindyLinz> @src foldl'
21:07:41 <lambdabot> foldl' f a []     = a
21:07:41 <lambdabot> foldl' f a (x:xs) = let a' = f a x in a' `seq` foldl' f a' xs
21:07:45 <CindyLinz> @src foldr
21:07:46 <lambdabot> foldr f z []     = z
21:07:46 <lambdabot> foldr f z (x:xs) = f x (foldr f z xs)
21:08:01 <CindyLinz> strict foldl 的意思是那個 f 要先執行
21:08:25 <c9sloud> Ohoh
21:08:30 <c9sloud> Got that
21:08:32 <CindyLinz> 而在 foldr 裡, f 已經是唯一執行了, 也就是一定會先執行....
21:09:07 <c9sloud> foldr creates thunk ?
21:09:21 <c9sloud> Or foldr' created thunk?
21:09:30 <c9sloud> Creates
21:10:26 <CindyLinz> 如果你是在想 foldr (+) 0 [999999] 爆炸的原因的話.. 不是一堆擺著不做事的 thunk
21:10:51 <CindyLinz> 是因為這時 f = (+) 是一個 eager 函數, 它會要求它的兩邊參數都要先 eval 出來
21:11:28 <CindyLinz> 而左半是好的, 但右半要再去展開 foldr.. 然後就一連串很長的展開...
21:11:30 <c9sloud> 原來！
21:11:43 <c9sloud> Whats eager func?
21:12:28 <CindyLinz> 我看 monochrom 用的, 不確定是不是學術上面正式的辭 ^^  反正意思就是它要等參數算完自己才會開始算
21:12:46 <CindyLinz> 自己定義 eager func 的話可以在參數的地方加上 bang pattern (!)
21:13:06 <CindyLinz> 而且可以看你想加哪幾個參數, 可以只加一部分, 不一定要全加
21:14:33 <c9sloud> 感謝 ^^
21:14:46 <c9sloud> 問個問題 ^^
21:15:23 <c9sloud> 笨問題....葉子書好像沒提到 suffix tree or prefix tree?
21:15:30 <c9sloud> XD
21:16:04 <CindyLinz> Introduction To Algorithms?
21:16:06 <c9sloud> 還是他其實是某種 tree 的 augmentation?
21:16:10 <c9sloud> Yyyeah
21:16:25 <CindyLinz> 以前好像有印象是在習題? 不確定.. XD
21:16:44 <c9sloud> Ohh
21:17:33 <CindyLinz> 不過要說它實作起來跟紅黑樹 (含 delete) 比步驟數, 我也不是很確定誰比較累..
21:18:28 <c9sloud> 恩恩
21:18:32 <CindyLinz> 它不會是那些比較正常的樹的變形.. 也太變形了 XD
21:19:27 <c9sloud> 該不會要讀 Donald 的書才有？
21:19:38 <CindyLinz> c9sloud: 讀 wikipedia 好了 XD
21:19:48 <CindyLinz> 我不知道什麼書有 ^^|
21:20:01 <CindyLinz> 我是聽到 hil 有教這個才知道有這東西 @@"
21:21:08 <letoh> prefix tree 是指 trie 嗎?
21:21:11 <CindyLinz> hackage 上面有人做.. http://hackage.haskell.org/package/suffixtree
21:21:33 <letoh> suffix tree 沒做過  大概是類似的東西@_@
21:22:25 <CindyLinz> letoh: trie 的話應該是一個字元一個 edge, 而這邊的 tree 是可以好幾個字塞在一根 edge 上
21:23:15 <letoh> 嗯嗯
21:23:49 <letoh> 一根 edge 塞好幾個字有什麼用途呢?
21:24:00 <letoh> 文法?
21:24:20 <CindyLinz> 省空間也省效能啊
21:25:24 <CindyLinz> 這是「那個」suffix tree 在 create 的時候只需要 O(N) 的重要因素 ^^
21:26:05 <CindyLinz> (應該是 O(N) 沒錯吧? 確認一下 @@")
21:27:58 <CindyLinz> wikipedia 這邊寫空間是 N, 時間沒講.. @@"
21:30:00 <CindyLinz> 啊有, 也是 O(N)
22:27:54 <godfat> CindyLinz, http://hannahkuan2014.blogspot.com/2014/05/005.html
22:33:08 <c9sloud> Constructing time 好像還好
22:57:37 <c9sloud> 應該只有 start up time 會去 compile 全部的 patterns
22:57:44 <c9sloud> runtime 只需要 read only
22:57:55 <c9sloud> 剛剛翻到 "Life Without Arrays or Hash Tables"...
22:58:06 <c9sloud> 這樣是要怎麼活 XDDDD
22:58:41 <godfat> hash table key 用 integer 當 key 模擬 arrays?
22:58:44 <c9sloud> And "Haskell arrays are not mutable.." 每次修改的時候就要重新複製一份 XD
22:59:17 <godfat> 這就要看 persistent data structure 了
23:00:10 <c9sloud> 怎麼說
23:00:13 <CindyLinz> Haskell std lib 有 mutable 的 MArray 啊~
23:00:41 <CindyLinz> 看是要 IO 版的或是 ST 版的都行~ 還有我超愛(誤)的 unsafe!
23:01:03 <godfat> 有 persistent data structure 不就不用每次都完整複製不是嗎？
23:01:28 <CindyLinz> Hash 的話, std lib 有官方建議 hashtables package, 也是有 IO 版和 ST 版, 各三種實作...
23:01:43 <c9sloud> 那 Hash 呢？是像 Data.Map 嗎?
23:01:47 <c9sloud> 還是?
23:01:56 <godfat> 我上次想用 hash 覺得超麻煩的，還是用 tree 比較簡單..
23:01:59 <c9sloud> 推薦 Data.Map 嗎?
23:02:01 <c9sloud> yeah..
23:02:05 <c9sloud> 剛剛讀到那段也是這樣說
23:02:10 <CindyLinz> hash 要準備 hash 函數真的是很討厭 :Q
23:02:23 <c9sloud> "implementing a naive tree type is particularly easy in Haskell" XD
23:02:32 <CindyLinz> 我用 C++ 隨手寫的東西就算用了 stl, 還是常常用 map/set 而不用 hash_map/hash_set.. ^^|
23:02:48 <godfat> 不過什麼時候 hash table 會比紅黑樹之類的好？
23:02:51 <CindyLinz> 因為也不知道給出的 hash function 行不行 @@"
23:03:03 <CindyLinz> godfat: 通常都比較好吧? 只是不能太衰....
23:03:14 <c9sloud> 噢 他剛剛說的 haskell arrays 是指 tuple
23:03:17 <c9sloud> 的樣子
23:03:55 <c9sloud> 咦
23:03:58 <c9sloud> wait a second
23:04:07 <CindyLinz> 1 second 過了..
23:04:11 <c9sloud> (0,5) <= 這樣才是 tuple 吧
23:04:15 <c9sloud> CindyLinz: XDD
23:04:27 <godfat> CindyLinz, 我不知道，之前無聊有測過 c++ map 跟 unordered_map, 發現效能差不多，甚至量少時 map (紅黑樹) 還比較快。我不知道會不會是實作問題？
23:04:28 <c9sloud> ['a','b'] <= This shall be array
23:04:44 <godfat> list?
23:05:11 <c9sloud> yeah 但書上寫 Array 有點混淆 XD
23:05:20 <godfat> 量少 => n < 10000
23:05:23 <c9sloud> ah,
23:05:27 <c9sloud> 他是說 Data.Array
23:05:39 <c9sloud> ['a','b'] # list
23:05:48 <c9sloud> Array # Data.Array
23:06:36 <c9sloud> 請問一下 haskell 有類似 perldoc 之類的東西嗎?
23:07:38 <godfat> 不知道 perldoc 是什麼樣子 XD stdlib 文件？
23:07:48 <c9sloud> command line 可以 man
23:07:52 <c9sloud> 類似 cppman 之類的
23:08:06 <godfat> 那我是沒聽說過
23:08:08 <c9sloud> for example, perldoc JSON::XS
23:08:34 <godfat> 做個 cli 的 http://www.haskell.org/hoogle/ 介面 XD
23:08:45 <c9sloud> counterpart 的話可像是 ghcdoc Data.Array ?
23:08:57 <c9sloud> oh
23:09:04 <c9sloud> 所以目前還只有 web 版本就是了 XD
23:09:26 <godfat> 我不知道，haskell 沒寫很多 orz...
23:10:06 <c9sloud> 剛剛這樣大概看過，他的意思是說 Haskell 沒有 built-in Hash or Array, 而 Haskell Array/Hash 都是用 haskell functional 實作的, 這樣解釋應該沒錯?
23:10:17 <c9sloud> i mean language built-in hash / array
23:10:54 <godfat> 不是很懂這是什麼意思... 這是說沒有 "native" 的支援，但是有 haskell 實作的版本？
23:12:31 <godfat> http://hackage.haskell.org/package/array-0.5.0.0/docs/Data-Array.html
23:12:32 <godfat> 這樣不算 built-in, 那什麼算啊？ = =
23:13:01 <CindyLinz> 對這句是在說什麼啊 ^^|
23:13:26 <CindyLinz> 我以為是 std lib 有提供 hash / array, 但不是用 Haskell 實作出來的
23:13:57 <CindyLinz> 我之前有找一些 persistent 和 pure 實作的 array...
23:14:12 <CindyLinz> 但是有點混亂, 尚無結論 orz
23:14:44 <CindyLinz> 找的時候才發現還有分級: partial persistent -> full persistent -> pure implement 是不同等級的 XD
23:15:17 <CindyLinz> partial persistent 是可以找到舊版, 但是舊版可能是唯讀的; full persistent 是舊版也可以 fork 出來修改
23:15:30 <CindyLinz> 但仍可能不是 pure functional 實作
23:16:56 <godfat> 如果不是 ST monad 或是 IORef, 怎麼會有 mutable array 啊？
23:22:23 <CindyLinz> godfat: 理想的話就是給你更動後的下一版的 array, 而且不要花太多時間呀
23:23:21 <godfat> CindyLinz, 這樣不是破壞 referential transparency? 我漏掉什麼嗎..? @@
23:24:18 <CindyLinz> godfat: 你看 Map/Set 就是這樣做的.. MArray 的存在, 就是因為 persistent (還)沒辦法做到 O(1) update
23:24:28 <CindyLinz> 有沒有被證明出來一定做不到就不知道了
23:24:58 <CindyLinz> 所以就沒有 MMap 和 MSet 了..
23:26:34 <godfat> 唔，整個 MArray 就是 monad... XD
23:27:11 <CindyLinz> 什麼意思呀? @@"
23:28:23 <godfat> 就是說 mutable 的部份只在 monad 裡面，但 Map 跟 Set 直接就是 data 吧？
23:29:42 <CindyLinz> 嗯 MArray 只能活在特定的 monad 裡面, 由 monad 來限制 programmer 不會去摸到舊版
23:29:57 <CindyLinz> 不會在改動後再去摸改動前的版本
23:30:12 <godfat> 所以我的感覺是這樣跟 ST monad 其實差不多
23:31:12 <godfat> 實際用起來就真的是 imperative 了.. XD
23:31:18 <CindyLinz> 然後... 我覺得 std lib 會有 MArray 是因為目前沒有夠快的 persistent Array, 不然, 它很冗啊
23:31:52 <godfat> 嗯嗯，所以前面說 native (unpure) 的部份都是在說 MArray..
23:32:06 <CindyLinz> mm
23:52:18 <godfat> 剛看到這個，我覺得我真的對 scala 投降了...
23:52:19 <godfat> https://twitter.com/bodil/status/465758874365362177
23:57:59 <c9sloud> I mean 像 perl 可以直接用 %hash 這是 language built in
23:58:18 <c9sloud> 不需 import package 就可以用
23:58:47 <godfat> 喔，那應該是在 prelude 裡面
23:59:00 <godfat> http://hackage.haskell.org/package/base-4.7.0.0/docs/Prelude.html
