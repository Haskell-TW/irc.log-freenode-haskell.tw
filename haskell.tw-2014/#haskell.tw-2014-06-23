00:12:47 <mathist> 哦哦 剛看完獵人想了一下
00:12:55 <mathist> 包括lambda的東西都搞懂了
00:13:25 <mathist> f: A->B,  A 是function的時候, B 是function的時候，分別要怎麼宣告什麼的
00:13:42 <mathist> good!
00:13:58 <mathist> 應該有融會貫通 :P
00:23:09 <mathist> 一併感謝大家熱心指點呀!!
05:25:38 <caasihuang> au: 對了，那句 "On this infinite grid of ideal one-ohm resistors..." 是高中物理啊，我現在還搞不懂 XDD #5/28 #oleg
09:12:50 <mno2> http://neilmitchell.blogspot.sg/2014/06/announcing-ghc-make.html
12:24:10 <mathist> monad 一定要看嗎?
12:24:24 <mathist> 假如我沒有要用haskell寫IO什麼的話~
12:24:44 <godfat> 要，除非你不打算用 library XD
12:26:34 <au> caasihuang: 出處是 http://www.explainxkcd.com/wiki/index.php/356:_Nerd_Sniping
12:27:19 <mathist> haskell有什麼library需要知道的?
12:27:36 <mathist> 因為我是想太複雜的東西就用mathematica寫
12:27:49 <mathist> 畢竟mathematica還有支援符號運算
12:28:34 <mathist> 我沒有要寫遊戲, 沒有要寫GUI這樣
12:29:41 <godfat> 用得不夠多有點難回答 @@" 不過大部分都是要的，尤其是有 state 的計算的
12:30:23 <mathist> 喔喔
12:30:23 <au> mathist: 有一份筆記 http://dev.stephendiehl.com/hask/
12:30:32 <mathist> mathematica裡面也有monad嗎
12:30:36 <au> 上面提到最近比較常用的模組可以看
12:30:40 <godfat> mathist, 你想拿 haskell 來做什麼？
12:31:10 <mathist> 體驗數學之美= =
12:31:12 <mathist> xd
12:31:27 <mathist> 體會函數式編程的想法
12:31:33 <godfat> XD... 那也許可以不用，如果你不想體驗 category theory 之美之類的（？）
12:31:51 <mathist> category theory要先於monad來學嗎
12:32:03 <godfat> 單純用的話是不用
12:32:26 <godfat> 不過搞不好 agda 比較適合你 XD
12:32:27 <mathist> 那會不會造成理解上懵懵懂懂
12:32:36 <mathist> 先不學category
12:32:42 <mathist> 的話
12:33:05 <mathist> au: 我是想挑這篇入門 http://www.iis.sinica.edu.tw/~scm/ncs/2009/11/a-monad-primer/
12:33:07 <godfat> 我不知道，看你怎麼理解事情吧？對我來說，haskell monad 只有計算上的意義，沒有數學上的意義|||b
12:33:34 <mathist> 所以不會有靠使用haskell讓你更了解category theory的事情發生?
12:34:00 <mathist> 因為我大學部代數也還沒學 xd
12:34:22 <godfat> 我是覺得不會，因為我真的去讀 category theory 時，說實在我連不太起來。在 haskell 裡比較像是某種 category theory 的特例
12:35:43 <au> 入門時如 godfat 所說，但是 https://hackage.haskell.org/package/category-extras (現在拆成 lens 等一堆 package 了) 就有比較完整的 demo
12:36:02 <au> 或是像 https://hackage.haskell.org/package/data-category 看起來主要是教學用的範例
12:36:19 <godfat> au++
12:38:10 <mathist> 我想問一下, 如果真的處理太複雜的科學問題, 同樣是functional programming language, 應該會挑Mathematica而不是haskell做吧
12:38:57 <mathist> 我猜Mathematica可用的函數也遠比haskell多
12:39:04 <au> 猜錯了 XD
12:39:14 <mathist> 是嗎!
12:39:24 <au> 複雜的科學問題一般都是好幾個語言的模組合作成的。
12:39:29 <godfat> 抱歉，沒用過 Mathematica XD 不過我猜還是要看什麼問題，雙方套件應該各自不同
12:40:09 <au> Mathematica 有一個很好的核心的彙集，Haskell 主要是靠社群維護 https://hackage.haskell.org/
12:40:41 <au> 可用的函數應該是同一個數量級，但每個領域可用的涵蓋範圍不同
12:41:17 <mathist> 喔喔
12:41:21 <au> 重點是趁年輕多學幾種語言，然後把問題分成小部份，每個部份都有某種語言的現成模組解決其 90%
12:41:52 <au> 然後串起來問題就解決了。這就是大事化小小事化無以無事取天下的道理 XD
12:42:42 <godfat> XDDD 現有工具大集合
12:42:47 <mathist> 可是Mathematica支持符號運算, 譬如Expand[(x + y)^3] 可以得到 x^3 + 3 x^2 y + 3 x y^2 + y^3, 感覺符號運算跟函數式編程搭配 可以變超強
12:42:57 <mathist> haskell好像還沒學到有符號運算
12:43:39 <godfat> 什麼情況會需要這種符號運算啊？
12:44:13 <mathist> godfat: 應該很多吧, 我看mathematica官網很多很炫的
12:45:10 <godfat> 我在想的是，如果只是要計算結果的話，應該不需要符號轉換？
12:45:46 <mathist> http://reference.wolfram.com/mathematica/ref/Nest.html
12:46:30 <mathist> 可能是式子的推導, 化簡, 約分通分, 微分積分, 甚至進階運用吧
12:46:33 <godfat> 像是一些便利寫法？ template haskell 應該可以做 XDD
12:46:34 <mathist> 我也不熟~
12:47:02 <mathist> 嗯嗯
12:47:24 <au> mathist: symbolic math 是 mathematica 的核心，haskell 雖然有 docon、HCAS, etc... 自己寫也很容易 http://5outh.blogspot.tw/2013/05/symbolic-calculus-in-haskell.html
12:47:50 <godfat> 雖然不知道是否有關，不過我想到 pure
12:47:51 <godfat> http://en.wikipedia.org/wiki/Pure_%28programming_language%29
12:48:08 <au> 但是畢竟不是其強項，所以如果要發展 symbolic math 系統的應用，當然以 mathematica/matlab 優先
12:49:31 <mathist> 嗯嗯
13:27:10 <CindyLinz> mathist: Haskell Symbolic Algebra 可以這樣玩~~ # https://github.com/colah/HaskSymb
13:28:12 <mathist> 嗯嗯
13:29:19 <mno2> 貓理論中文簡介可以看 TassTW 的大作：https://www.ptt.cc/bbs/Math/M.1402800994.A.65F.html
13:32:44 <mno2> 不過貓理論算是給你描述的語言就是。就如 godfat 所說，其實看了對於寫 Haskell 程式不會有太大的感覺。因為是拿來建構的語言
15:17:07 <CindyLinz> 討厭.. 用 Parsec 的時候 import Control.Applicative 的話 <|> 就打架了 XD
15:39:16 <au> 用 hiding 就好了 XD
15:40:37 <CindyLinz> 可是我只是要用一次 (<*).... 想想就算了 orz
18:42:08 <c9sloud> http://weblog.bulknews.net/post/89635306479/ghq-peco-percol 這個很厲害
18:42:15 <c9sloud> 還不賴
18:42:21 <c9sloud> cc @CindyLinz
