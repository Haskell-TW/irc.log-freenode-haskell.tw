06:30:21 <caasih> 關於 the Haskell School of Expression
06:30:42 <caasih> 明天大概可以看到 chapter 15: A Module of Reactive Animations
06:30:51 <caasih> 也就是 FRP 剛開始的部分吧
06:31:44 <caasih> 但能理解的部分越來越少了，猜最後應該讀不到 19: An Imperative Robot Language
06:31:58 <caasih> 還有 20: Functional Music Composition
06:32:51 <caasih> 兩年前比起 paper ，也許我更需要此書 XDDD
09:13:21 <jokester> 棒 -v-
14:46:42 <darkx> =w=
19:05:50 <CindyLinz> 書的確比 paper 好學...
19:06:41 <caasih> 看 paper 就沒有（可能是編造的）演進過程嘛
19:06:54 <caasih> 還沒做完的 repo 在此 https://github.com/caasi/school-of-expression
19:08:41 <caasih> 不過錯過的就是錯過了 ~"~
19:09:01 <CindyLinz> 而且每篇 paper 都會自己定義一遍自己專用的符號
19:09:08 <CindyLinz> 要先花一堆力氣記住它們的 semantics
19:09:15 <CindyLinz> 然後到了下一篇的時候全都作廢w
19:09:53 <caasih> 我覺得這本還不錯的是，前面沒有定義一堆自己的 infix operators
19:10:01 <CindyLinz> 是喔..
19:10:04 <caasih> 寧願用 `Over` 這種東西
19:10:11 <CindyLinz> 其實如果是書的話... 就算定義了一堆, 也還好....
19:10:21 <CindyLinz> 至少你記了一次以後可以適用整本....
19:10:24 <caasih> 第一個是 (>*) ，因為不能簡單 lift (>)
19:10:29 <CindyLinz> XD
19:10:33 <caasih> XD # 用整本
19:13:18 <CindyLinz> 可以攤銷下來差別很大啊.....
19:13:38 <CindyLinz> 如果一篇才 8 頁的 paper 就花 2 頁定義符號真的很可惡.....||
19:13:58 <CindyLinz> 而且 paper 不知道是耍帥還是怎樣, 喜歡用奇怪字體的奇怪符號.....
19:14:26 <CindyLinz> 或是特別裝飾的括號..... operator 自己被拆成好幾塊, 身首異處.....
19:17:18 <caasih> 是指那種要兩三個 operators 看起來才完整的嗎 XDDD
19:18:07 <CindyLinz> 然後部分 operand 要縮小放在特別的位置...
19:18:36 <CindyLinz> 這個 operator 顯然無法念出聲... 就算念得出來, 也不知道順序上要怎麼穿插在那些 operand 之間
19:20:11 <caasih> . o O (到底是讀了什麼？)
19:26:56 <CindyLinz> 去吧... 就是你了! # http://www.cs.cornell.edu/courses/cs6110/2009sp/lectures/lec05-fa07.pdf
19:36:29 <caasih> * 等等來文字轉播 AlexLu 的短講...
19:37:39 <caasih> 那些 unicode 符號真的可以直接寫嗎 o_o
19:40:56 <caasih> 我知道 agda 可以用 unicode 符號啦，不過上下標就不知道了
19:52:02 <caasih> AlexLu 今天要介紹的是 https://www.microsoft.com/en-us/research/wp-content/uploads/2016/11/trees-that-grow.pdf
19:52:40 <caasih> 主要是講怎麼擴展、裝飾 AST
19:53:32 <caasih> 正在整進 GHC 中
19:53:49 <caasih> 編譯的過程是在操弄這個樹：
19:53:54 <caasih> * 標記原始碼位置
19:54:00 <caasih> * 標記 namespace
19:54:04 <caasih> * 標記 type
19:54:25 <caasih> compiler 作者面臨兩個選項：
19:54:32 <caasih> * 每次變動都設計新的 data type
19:54:44 <caasih> * 或設計一個很大的 data type 來包含所有可能
19:55:04 <caasih> GHC 的 HsSyn 有 97 個 data tyes + 321 個 data constructors
19:56:32 <caasih> HsSyn, TemplateHaskell, haskell-src-exts 各有一棵
19:57:21 <caasih> AlexLu 正在向大家科普 expression problem
20:01:31 <caasih> 現在的解法：
20:02:47 <caasih> * Straightforwand Parameterisation
20:02:58 <caasih> parse :: String -> HsExpr RdrName
20:03:11 <caasih> rename :: HsExpr RdrName -> HsExpr Name
20:03:23 <caasih> typecheck :: HsExpr Name -> HsExpr Id
20:04:06 <caasih> RdrName, Name, Id 是在不同階段包裝不同的資訊
20:04:13 <caasih> * Extra data contructors
20:04:35 <caasih> 多一個 Constructor 給別的 pass 用
20:04:55 <caasih> * Alternating data types
20:05:05 <caasih> * Phase-indexed fields
20:05:36 <caasih> 接著 AlexLu 跟大家科普 type family
20:10:47 <caasih> 作者在第三章用 GHC8 都有的 extensions 提出新的做法
20:11:33 <caasih> 另外 AlexLu 說這份 paper 可以跑， pdf 是用 lhs2Tex 做出來的
20:15:09 <caasih> 此 paper 舉了一個小語言來當例子
20:15:57 <caasih> . o O (這個小語言有 Lit, Var, Ann, Abs, App, Expr )
20:18:13 <caasih> * pattern synonyms
20:18:24 <caasih> * 加 constructor 的方法
20:19:36 <caasih> * pattern synonym 的缺點： GHC 沒法檢查 pattern-matching 有謬 exhaustive
20:21:30 <caasih> * 改變 constructor 的方法
20:25:21 <caasih> * 要加 type parameters 的話，一開始的樹還是要多挖洞
20:26:34 <caasih> 缺點：
20:26:44 <caasih> * 效率變低，多了 extension field
20:27:18 <caasih> * patetrn synonym 造成沒法檢查 pattern-matching 是否 exhaustive
20:30:01 <caasih> AlexLu 提到有趣的是，這個整進 GHC 的過程正在發生，
20:30:18 <caasih> commit 才剛被 revert （整壞了 xD）
20:30:21 <caasih> 以上
