15:34:13 <CindyLinz> Haskell 有規定 eval 到 undefined 就一定要爆掉嗎?
15:34:29 <CindyLinz> 還是 eval 到 undefined 可以是.. undefined. ^^
15:34:49 <CindyLinz> 我在看了一些 GHC 用 RULE 作 optimize 的東西
15:34:58 <CindyLinz> 有些會強調說它改了 semantic
15:35:16 <CindyLinz> 會把原本可能會爆的東西, 剛好前後對消, 所以就沒爆了
15:35:58 <CindyLinz> 如果 eval _|_ (含 undefined 或是 a = a 這種的) 的行為是 undefined 的話, 那就沒問題了 ^^
15:37:11 <CindyLinz> 從 C 語言 undefined behavior 對 compiler 友善的現象的想法.. :p
15:37:28 <godfat> 這個 undefined 是字面上的嗎？如果是的話，似乎是可以吃掉 exception
15:37:29 <godfat> > handle ((\_ -> do{ return () }) :: SomeException -> IO ()) (evaluate undefined)
15:37:30 <lambdabot>  <IO ()>
15:38:17 <godfat> 我不確定這跟你想的有沒有關就是了... XD
15:41:01 <CindyLinz> > handle ((\_ -> do { return () } ) :: SomeException -> IO ()) (let a = a in evaluate a)
15:41:03 <lambdabot>  <IO ()>
15:41:10 <CindyLinz> 為什麼還是吃得到 XD
15:41:23 <CindyLinz> 大概是 lambdabot 會丟 timeout exception?
15:44:25 <godfat> 有可能 XD
15:51:35 <CindyLinz> 或是說... undefined `seq` 3 可不可以仍然得到 3
16:15:22 <godfat> 我感覺要是不行，不然就 defeat the purpose of seq? XD
16:17:19 <CindyLinz> 我覺得 seq 的用途不是讓能爆的爆一爆.. 而是讓不會爆的趕快算一算.. @@"
16:17:53 <CindyLinz> 所以覺得如果是會爆的, 其實可以讓 compiler 自由發揮一下 ^^
16:21:42 <CindyLinz> 然後.. 就算 seq 守住 undefined `seq` 3 一定要爆, 它對於 useALotOfMemory `seq` 3 還是沒辦法有一致的結果
16:31:54 <CindyLinz> 然後.. 既然 ghc optimize 本來就可能會去改變 useALotOfMemory 的行為 (從會爆變成不會爆), 從而改變 useALotOfMemory `seq` 3..
16:32:27 <CindyLinz> 如果 ghc 事先知道 useALotOfMemory 是沒有用的, 之後也沒人要去拿它的結果來用, 那乾脆就可以把它整個移掉
16:33:35 <godfat> 嗯... best effort XD
16:33:35 <godfat> 不過這樣說來，就等於 seq 不一定會做什麼事了？
16:36:25 <CindyLinz> 有的..
16:36:55 <CindyLinz> 如果 ghc 知道算下去不會爆的方法, 就必須把它算出來
16:37:44 <godfat> 從 programmer 的角度並不知道不是嗎？
16:37:55 <CindyLinz> godfat: 這是現實程式的天缺啊..
16:38:13 <CindyLinz> halting problem XD
16:38:53 <CindyLinz> 好啦不一定是 halting problem
16:39:02 <godfat> 總之 seq 解釋起來就變成，總之我要把左邊的東西先算出來，你就盡量啦
16:39:02 <godfat> 這樣嗎？ XD
16:39:25 <CindyLinz> 現在就是這樣呀.. 只是我想, 可以讓 ghc 盡量的程度再更盡量一點
16:40:20 <godfat> undefined `seq` 1 -- 1 這樣是更盡量嗎？ XD
16:41:05 <godfat> 不過這也許是 undefined 實作問題，我想，畢竟他是丟 exception
16:41:21 <CindyLinz> undefined `seq` 1 -- 1 或 undefined. 也許我們手上的 ghc 比較笨, 所以就 undefined, 也許它比較聰明, 所以就 1
16:41:30 <CindyLinz> 不對啦
16:41:58 <CindyLinz> 因為 ghc 找不出 undefined 算出來的方法, 所以就沒有要求它一定要怎麼做
16:42:45 <godfat> 你是說你理想上的 seq 實作嗎？
16:42:46 <CindyLinz> 剛剛是說, 如果 ghc 找得到算得出來的方法, 而且出來的結果之後有機會用得上, 那就要當場去把結果弄出來.
16:42:57 <CindyLinz> 我們用 seq 都是效率考量吧
16:43:14 <CindyLinz> 叫 ghc runtime 把 thunk 縮一縮之類的
16:43:48 <CindyLinz> 如果 `seq` 的左邊是個 bottom, 應該是 programmer 寫錯了.. XD
16:44:03 <godfat> 所以你覺得 non-termination `seq` 1 的話，ghc 應該試著算，然後 timeout fallback 回 1 嗎？
16:44:36 <CindyLinz> 我覺得 non-termination `seq` 1 的話, programmer 寫錯了, 所以 ghc 你請自便.. XD
16:44:53 <CindyLinz> timeout fallback 回 1 也是你的自由這樣 XD
16:45:19 <CindyLinz> 這樣 optimize 比較好做... ww
16:46:33 <CindyLinz> 不然.. 連 a = \x -> let y = x + 1 in y `seq` y - 1 都不能縮成 a = id 了... @@"
16:46:54 <godfat> 聽起來好像也可以在 something `seq` 1 時開一個 thread 去算 something... XD
16:46:54 <godfat> 不過我想這些應該是實作自由沒錯，畢竟 seq 還是 pure 的..?
16:47:12 <CindyLinz> seq 是 pure 的.. 只是可能會弄爆記憶體..
16:47:54 <godfat> 弄爆的話只好停下程式，硬跑 gc, 甚至丟掉 seq 左邊，然後程式繼續？ XD
16:48:53 <CindyLinz> 欸可是用 `seq` 的時候, 是要左邊先跑出結果了, 右邊才能繼續欸.. 常常是右邊可能會用到左邊很多次, 或是會拿左邊再次去展開一堆 thunk, 怕 thunk 太多出事 @@"
16:49:09 <CindyLinz> 但如果 `seq` 左邊會爆的話, 一切都不重要了.. XD
16:49:17 <godfat> 不過看起來要把 a = id 的話，還得保證 x + 1 - 1 跟 x 是相等的
16:49:40 <CindyLinz> 但就如果 x 有可能是整個 Int 的話, maxBound + 1 就壞了
16:49:54 <godfat> 那聽起來還是先算出來就好呀 XD
16:50:31 <CindyLinz> x + 1 - 1 如果不能縮成 x, 真是太苦了啊
16:50:53 <CindyLinz> 所以如果把 semantic 定成, 如果原本不會壞, 那麼 optimize 之後也不會壞
16:51:06 <CindyLinz> 如果原本會壞, 那就算了
16:51:29 <CindyLinz> 算了的意思是, 仍有可能不會壞
16:52:11 <CindyLinz> 如果把 a optimize 成 a = \x -> if x < maxBound then x else undefined 可能比原本還慢 XD
16:52:33 <godfat> 這樣聽起來 ghc 必須預知 seq 左邊是什麼 @@
16:52:34 <godfat> undefined 是可以預知，但一般運算不行
16:52:49 <CindyLinz> 不是必須, 是高興就預知一下..
16:52:58 <godfat> XDDDD
16:53:44 <CindyLinz> 像這個 a 與 id 的例子, 也沒真的去預知什麼, 只是就不處理範圍外的事情
16:54:37 <CindyLinz> 然後一般性的 x `seq` y 的話.. 如果發現 x 與 x 的內容都沒再被用到, 就乾脆變成 y 就好, 把整個 x 丟掉
16:55:10 <godfat> 喔喔，所以回到你原本說的會爆後來不會爆了
16:55:10 <godfat> 原本 x + 1 - 1 可能會炸，但你改成 x 後就沒事了
16:55:10 <godfat> 這讓我想到之前看到 gcc 的討論... 也是關於整數 overflow 的
16:55:29 <CindyLinz> 對
16:55:36 <CindyLinz> 的確是從 C compiler 來的想法.. ww
16:55:54 <godfat> 唔唔，好，我被你說服了 XD
16:56:21 <CindyLinz> 不過昨天我看到一個看起來很好用的 Haskell standard lib (不確定是不是 ghc only)
16:56:35 <CindyLinz> Debug.Trace 裡面的 trace :: String -> a -> a
16:57:06 <CindyLinz> 你看這 type 長得跟 seq 的 a -> b -> b 這麼像就知道它也是個邪惡的傢伙 XD
16:57:45 <CindyLinz> 它會先把 String 那一項從 stdout (or stderr?) 印出來, 然後若無其事地把後面那個 a 給出去
16:58:17 <CindyLinz> 如果 seq 如我那樣講的定義的話, 這種函數就只能 compiler 內建實作才做得出來了
16:58:46 <CindyLinz> 然後一些 unsafe 的東西也會真的 unsafe.. 可能會被 optimize 掉.. XD
16:59:17 <CindyLinz> 就.. 如果 unsafe 算出來的東西後來沒人想看的話, 整個 unsafe 可能就被丟了
17:00:49 <godfat> 結果 trace 就不 trace 了 XD
17:00:49 <godfat> 這時候可能要 -O0 這樣..? XD
17:01:01 <CindyLinz> 所以 trace 要由 compiler 內建嘛... XD
17:01:11 <CindyLinz> 就像現在的 seq 也一定是 compiler 內建 :p
17:01:30 <CindyLinz> 咦, seq 得由 compiler 內建好像就是跟你討論出來的 XD
17:02:12 <godfat> compiler 地主優勢... =_=
17:02:13 <godfat> 這樣愈來愈多東西是 compiler only... XD
17:02:13 <godfat> 我們把髒東西都丟給 compiler, 建構我們上端美好無上的純淨世界
17:02:53 <CindyLinz> 啊還不都因為 ghc 下面踩的是 gcc 這片重度汙染的大地.... (遠目)
17:03:18 <CindyLinz> mno2 聽不下去了.. QQ
17:03:20 <godfat> XDDDDDDDDDD
17:03:20 <godfat> 我覺得我腦裡好像浮現了一部電影
17:03:46 <CindyLinz> ._.?
17:04:34 <godfat> 比方說上層美好 ghc 世界跟下層骯髒 gcc 世界，在某一天忽然 gcc 跟 ghc 宣戰要革命獨立之類的
17:04:46 <CindyLinz> 其實是這一週花了些時間去拼 http://benchmarksgame.alioth.debian.org/ 有點挫折.... orz
17:05:03 <CindyLinz> 我好像聽說過這個電影.....
17:05:48 <godfat> 好像是 shootout 新版 XD 上次看前面全都是 c...
17:05:49 <godfat> 很多電影都像這樣的感覺 XD
17:06:17 <godfat> 不過電影裡上層可能是高科技，不像 ghc 純淨世界我想到的是獨角獸
17:07:18 <CindyLinz> 輸給 C 不會難過.. 輸給 Java 一大堆, 然後再輸 go 就難過了.... orz
17:07:55 <godfat> 我看上面的 ghc 是沒輸 java/go 啦... XD
17:08:02 <CindyLinz> 咦?
17:08:09 <godfat> http://benchmarksgame.alioth.debian.org/u32/performance.php?test=nbody#about
17:08:15 <CindyLinz> 是因為我看的 architecture 的問題嗎...
17:08:28 <godfat> 我隨便翻的，不知道是在看啥
17:08:41 <CindyLinz> go.plurk.com/?url=http%3A%2F%2Fbenchmarksgame.alioth.debian.org%2Fu64q%2Fperformance.php%3Ftest%3Dnbody%26sort%3Dfullcpu&id=33357X911862&xs=1
17:08:50 <CindyLinz> 咦
17:08:52 <CindyLinz> http://benchmarksgame.alioth.debian.org/u64q/performance.php?test=nbody&sort=fullcpu
17:09:46 <godfat> 多核心 ghc 就輸了！？
17:10:07 <CindyLinz> 可是這一個 N-Body 的問題我不覺得多核心能做什麼就是了 @@"
17:10:24 <CindyLinz> 它只有 5 個 body, 然後 50M 個 iteration
17:10:42 <CindyLinz> 每個 iteration 要 depend 前一個, 每個 iteration 裡面只有 5 個 body 要算 @@"
17:10:46 <godfat> 喔喔，重點是 x86 vs x64
17:10:47 <godfat> x64 java 效能變好
17:11:16 <CindyLinz> 或說 ghc 在 x64 的執行效能還沒有調得很好?
17:11:23 <godfat> 感覺是這樣
17:12:26 <godfat> 好像大部分在 x64 都快很多
17:12:56 <CindyLinz> 這個印 pi 的超誇張 @@  http://benchmarksgame.alioth.debian.org/u64/benchmark.php?test=pidigits&lang=all&data=u64
17:13:16 <godfat> p...hp?
17:13:27 <CindyLinz> php 2.15s, Haskell 3.41s
17:13:35 <godfat> 呼叫 gmp 是怎樣
17:13:48 <CindyLinz> 我覺得 Haskell 輸在它是用 Show 來輸出 @@"
17:14:00 <CindyLinz> Show 會先轉 [Char]..
17:14:09 <CindyLinz> 需要 ByteString 版的 show.. XD
17:14:11 <godfat> ...XD
17:14:32 <godfat> 快 submit 一個版本
17:14:48 <CindyLinz> 我不知道能不能用第三方的 lib 就是 @@"
17:15:20 <CindyLinz> 咦, bytestring 在 standard lib 裡唷!?
17:15:34 <godfat> 是啊，而且他們不是都用 gmp 了 @@
17:15:55 <CindyLinz> 那 perl 可以用 Inline::C 嗎..... 囧
17:16:07 <godfat> XDDDDD
17:16:49 <godfat> http://benchmarksgame.alioth.debian.org/u64/program.php?test=pidigits&lang=scala&id=4
17:16:49 <godfat> 你看看啦
17:16:49 <godfat> class GmpUtil {
17:16:49 <godfat>   System.loadLibrary("jpargmp")
17:16:49 <godfat>   @native def mpz_init(): Long
17:16:50 <godfat> ...
17:17:37 <CindyLinz> Gmp 等於是直接去操作浮點運算器?
17:18:02 <CindyLinz> 呃.. GHC standard lib 也有欸.... ww
17:18:19 <CindyLinz> 可是怎麼這麼沒內容啊 囧 http://www.haskell.org/ghc/docs/latest/html/libraries/integer-gmp-0.5.0.0/GHC-Integer-GMP-Internals.html
17:18:25 <godfat> 我不知道哩，只知道是科學運算用的
17:23:08 <CindyLinz> 不知道 deepseq 的實用性有多大 @@"  它用在大 structure 是效能毒藥啊 @@"
17:24:16 <godfat> 因為一次算太多東西？
17:24:25 <CindyLinz> 嗯不過這個印 pi 的程式, haskell 程式超短的 ^^  # http://benchmarksgame.alioth.debian.org/u64/program.php?test=pidigits&lang=ghc&id=4
17:24:34 <CindyLinz> 因為要層層跑 `seq`
17:24:45 <CindyLinz> 而且已經算完了的也要層層跑 `seq`
17:25:05 <CindyLinz> 雖然都不會去算, 但就要整個 traverse 檢查一次 @@"
17:25:11 <godfat> 也許 seq 過可以 mark 一下
17:25:14 <CindyLinz> 如果是一個巨大的 tree, 就很慘
17:25:51 <CindyLinz> 覺得 mark 一下又是個只有 compiler 能做的黑魔法 orz
17:26:39 <godfat> 是啊 XDDDDD
18:05:18 <CindyLinz> 經過一番努力.....
18:05:32 <CindyLinz> 我覺得 [Char] 並沒有想像中的慢.......... orz
18:05:52 <godfat> ...XD...
18:06:36 <CindyLinz> 原始程式裡面有一個一整串的 [[Char]] 而且裡面長得像這樣: ["1", "2", "5", ...]
18:06:44 <CindyLinz> 就是, 每一個內層 [Char] 都只有一個字
18:06:57 <CindyLinz> 我手動把這一層拆掉, 效能不變.... orz
18:07:11 <godfat> 看來要 profiling 了 XD
18:07:16 <CindyLinz> 那時還沒用到 ByteString
18:08:03 <CindyLinz> 現在把 : 換成 B.cons, 把 ++ 換成 B.append
18:08:17 <CindyLinz> 再自己實作一個 byteShow
18:08:25 <CindyLinz> 跑起來速度一樣... zz
18:08:43 <godfat> @@" 因為資料量都很小？
18:08:59 <CindyLinz> 我試 10000 digits, 都是一秒出頭
18:09:02 <CindyLinz> 而且頭一樣大
18:09:23 <CindyLinz> 每 10 digits 換一行, 不過 byteShow 只有用在行尾標行號
18:09:40 <CindyLinz> 原始版的話, 每一個 digit 都 show 一次, 行尾行號再 show 一個
18:09:57 <godfat> 這樣居然沒差，果然證明了 ghc 超強 (?)
18:10:32 <CindyLinz> 那怎麼還輸... QQ
18:10:55 <CindyLinz> 原始版看起來真像 perl golf... orz
18:11:13 <CindyLinz> 它定義了三個函數: (%) (#) (&)...
18:11:21 <CindyLinz> 然後都沒標 type..
18:11:24 <CindyLinz> 這是故意的吧 = =
18:11:38 <godfat> 其他用 gmp 作弊啦 = =...
18:11:54 <CindyLinz> 就看它算式裡面 #, %, &, +, *, -, @, = 混在一起 orz
20:43:37 <suhorng> javascript的Y combinator外觀.... http://kestas.kuliukas.com/YCombinatorExplained/
20:43:47 <suhorng> syntax matters...
21:51:51 <mno2> CindyLinz: http://www.techempower.com/benchmarks/  go 又獲勝了 xD
