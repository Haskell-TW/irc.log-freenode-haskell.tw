01:37:45 <hychen> 大神還有戰nvidia...
08:00:26 <xcycl> ...
08:00:52 <xcycl> 看了兩篇 yin wang 寫的東西好想吐
08:03:10 <xcycl> 有人有同樣的感覺嗎 orz.
08:25:32 <monochrom> 我的感想是"哈哈罵得真爽", 當然不是說一定罵得對
08:35:37 <xcycl> 他對可讀性這件事情真是異于常人，連吐槽的不知從何下手
08:38:27 <monochrom> "可讀性"本來就是主觀
08:40:43 <xcycl> 主觀歸主觀, 但還是有些基本的元素
08:41:11 <xcycl> 不然做 ui 的都在打高空了 ...
08:42:09 <xcycl> 就像我們傾向於"結構化"的程式這樣
08:42:31 <xcycl> 而不是一堆 GOTO 跳來跳去的
08:43:59 <monochrom> 那麼, 王垠的可讀性是甚麼?
08:50:15 <xcycl> 我觉得 Scheme （Lisp） 的基于“S表达式”（S-expression）的语法，是世界上最完美的设计。其实我希望它能更简单一点，但是在现存的语言中，我没有找到第二种能与它比美。也许在读过这篇文章之后，你会发现这种语法设计的合理性，已经接近理论允许的最大值。
08:50:18 <xcycl> .......
08:52:25 <xcycl> 他的論點是 (+ 1 (* 2 3)) 比 1+2*3 還要好讀 嗯 .....
08:54:52 <monochrom> 我喜歡 infix, 所以我喜歡 1+2*3. 但你知嗎, 那只是對童年所學的感情. 理性上, 我最想讀語法樹, 而不是文字
08:55:06 <xcycl> 是
08:55:21 <xcycl> 可讀性還要考慮個人的背景經驗
08:56:39 <monochrom> 這樣說吧: 換作 1$2#3, $ 和 # 是新的運算子, 你看得出它指 1$(2#3) 抑或 (1$2)#3 嗎?
08:57:29 <xcycl> 這實在不是問題耶
08:57:47 <xcycl> +- */ 這些 infix 之所以好讀, 就是因為絕大多數的人已經習慣了
08:58:09 <monochrom> 最理想是給我一棵樹看, 退而求其次是 (# ($ 1 2) 3)
08:59:47 <xcycl> 所以在其他語言像 Haskell 就寫成這樣啊
09:00:21 <xcycl> 我不是要爭論 infix 比 prefix 好
09:02:24 <monochrom> 你也許會喜歡 Dijkstra 的立場. 他說, 如果一個運算子是 associative, 那麼用 infix 就有好處. 否則, 反而混淆.
09:03:49 <xcycl> 比 S-expr 完美論合理多了 ...
13:52:12 <hychen> 我還滿喜歡 s-exp
13:52:29 <hychen> 在設計上, 我覺得他很漂亮
13:57:34 <b4283> 你是說「她」吧
16:47:38 <petercommand> dijkstra講的蠻合理的
16:50:16 <petercommand> 不過要搞priority就是了
16:50:35 <petercommand> operator
23:12:44 <godfat> 今天的投影片 http://www.godfat.org/slide/2013-11-07-variance/
23:15:16 <hashcat> scala !
23:15:25 <godfat> yep
23:20:16 <petercommand> 這slide好精美呀
23:24:40 <godfat> 謝謝 XDDD 這是沿用上次的樣式
