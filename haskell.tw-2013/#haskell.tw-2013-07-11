00:02:59 <letoh> suhorng: 我以為被 hello 吃掉以後  bye 就吃不到了
00:03:26 <letoh> 不過後來想了一下  那邊應該都是 bind 吧
00:03:31 <letoh> 要用參數去想才對
00:04:32 <suhorng> letoh: 沒那麼複雜耶 就是參數. Reader r a 跟 r -> a 是差不多的東西
00:10:05 <favonia> suhorng: 實際上... (->) r 本來就是 monad (攤手)
00:10:55 <suhorng> XDD
00:12:04 <suhorng> 是說有人有用過 Monad Zipper & View 嗎@@ （不是 Zipper Monad）
00:14:13 <favonia> > (return 100 >>= (+) >>= (*) >>= (-)) 2
00:15:31 <monochrom> lambdabot 不在
00:15:40 <favonia> monochrom: 反正只是當例子 xD
00:16:26 <petercommand> favonia: = =
00:21:05 <suhorng> favonia: Reader的恐怖用法...
00:27:44 <letoh> 把 favonia 當作 lambdabot 用? (大誤
00:28:30 <suhorng> 之前把一些重複使用參數的code變成 point-free style 時 lambdabot 就會給出用 Reader Monad 的 code...
00:37:17 <CindyLinz> letoh: 可以 run backward 的 lambdabot :p
05:35:25 <favonia> > (return 100 >>= (+) >>= (*) >>= (-)) 2
05:35:26 <lambdabot>   202
05:35:29 <favonia> > (return 100 >>= (+) >>= (*) >>= (-)) 3
05:35:30 <lambdabot>   306
05:41:32 <monochrom> (return 100 >>= (+) >>= (*) >>= (-)) 2  =  2 - 2*(2+100)
05:47:25 <favonia> > ((-) ((*) ((+) (const 100 2) 2) 2) 2)
05:47:26 <lambdabot>   202
05:48:19 <favonia> 這個 monad 就只是把 2 這個參數餵給每個人
10:30:14 <_13h> 好神奇的用法@_@
10:31:28 <favonia> _13h: 沒事不要學 lol (逃)
10:32:58 <_13h> XD 其他語言也有類似行為的語法，只是沒想到 monad 可以這樣用
13:41:55 <Jhe__> 直因數分解要怎麼做@@?
13:42:10 <Jhe__> 能提示一下嗎 ...
14:21:35 <Yu-Lin> =w= 好問題
14:21:57 <Jhe__> @@?
14:23:11 <Jhe__> 平常 imperative 的思維讓我在 haskell 裡好卡
14:31:42 <Yu-Lin> 先想想數學上怎麼做質因數分解
14:31:49 <Yu-Lin> haskell 程式碼就差不多那樣
14:41:39 <CindyLinz> Jhe__: 可能.. 從上往下想會比較容易
14:42:02 <Jhe__> 從上@@?
14:42:18 <Jhe__> 腦子裡就一直想迴圈 ...
14:43:26 <CindyLinz> Jhe__: 從下往上像是: 我已經有了什麼, 靠這些我可以再拼出什麼;  從上往下像是: 這整個問題是這樣, 我可以怎樣把它化為幾個小問題的組合
14:43:57 <Jhe__> 喔~ 從組合 轉成 拆解 ..
14:44:30 <CindyLinz> Jhe__: 不過.. 就算是迴圈也可以用遞迴的方式在 Haskell 裡面寫.  只是寫起來會覺得.... 如果這樣, 我何必用 Haskell 寫呢! 的感覺 :p
14:44:55 <Jhe__> 同感 ...
14:44:56 <monochrom> 而我就上下其手(誤), 即是上向下, 下向上同時進行 XD
14:45:10 <Jhe__> 聽起來頗詭異 ...
14:47:10 <monochrom> 首先你想用甚麼方法分解質因數? 在這階段根本不理程式語言, 甚至不理用電腦定人腦.
14:47:24 <CindyLinz> 質因數分解.. 我想有兩種可能拆法: 1.拆成任意兩數相乘, 然後這兩個數各自去作質因數分解; 2.試出一個最小質數來除它(或是最小但大於1的數),然後把剩下的部分丟去質因數分解
14:47:59 <CindyLinz> 好像 1. 的寫法也很容易寫成 2.... 那用 2 好了 XD
14:48:16 <monochrom> 例如說, "試除2, 試除3, 試除4..." 這是個慢方法, 但先決定你想不想用?
14:48:35 <Jhe__> 這也是我直覺的方法
14:48:45 <Jhe__> 用試除法
14:49:06 <CindyLinz> 然後.. 你也可以考慮先建一個質數列表來試
14:49:59 <Jhe__> 喔喔~
14:50:29 <monochrom> 好, 跟著就可以對正程式語言來實踐這方法. 有兩個選擇, 一個是容易想到的, 另一個是看過別人做才知的.
14:50:37 <Jhe__> 有從下面來的感覺了
14:52:35 <monochrom> 第一個選擇是用遞迴寫迴圈, 用參數扮變數
14:58:59 <monochrom> "while i<n { if n mod i = 0 then {yield i; n := n div i; }; i := i+1 }" --> loop n i | i<n && n `mod` i == 0 = i : loop (n `div` i) (i+1)
14:59:10 <monochrom>  | i<n = loop n (i+1)
14:59:17 <monochrom>  | otherwise = []
15:31:47 <_13h> 這種問題都在考數學  不是考程式XD
15:38:46 <Jhe__> agree ...
15:44:04 <Yu-Lin> 今天看到 FB 某社團，裡面出現了一句「linux 絕對不會自行重組。」
15:46:51 <Jhe__> 自行?
15:46:55 <Jhe__> 重組?
15:47:20 <hychen> 硬碟磁區整理
15:47:31 <hychen> 因為filesystem的特性
15:48:00 <hychen> 所以windows要跑磁區整理, 可是這應該很久的事了吧?
15:48:28 <_13h> 沒使用者操作的話，windows 也不會自行重組啊XD 自己亂重組的系統好可怕XD
15:48:54 <hychen> 對啊ㄚ
15:49:04 <hychen> 這應該filesystem自己要幹好的事
15:49:30 <Jhe__> 不試要使用者排程嗎@@?
15:50:13 <_13h> linux 上很多 filesystem 也是可以 defrag，但一般不太需要做就是
15:50:27 <kanru> defrag 的迷思！
16:07:46 <CindyLinz> _13h: windows default 設定好像每週有個特定時間會重組啊
16:10:56 <_13h> 那是要有開排程才會做的嗎？還是不開就會做?
16:16:08 <Jhe__> 有辦法 從一個 list 取資料 連乘到特定職停止嗎
16:16:14 <Jhe__> 特定值*
16:17:27 <Yu-Lin> [1, 2, 3] -> 1 * 2 * 3 這樣嗎？
16:17:39 <kanru> 像 reduce 這種 function 好像沒有 early return 的方法
16:18:15 <Jhe__> 類似 可是我想停在 積 = 2 的時候
16:18:50 <Jhe__> 單純連乘 可以用 product
16:18:59 <Jhe__> 可試有條件停止不知怎麼辦
16:19:27 <CindyLinz> _13h: 我以為是預設的...
16:19:43 <CindyLinz> 只是是在凌晨之類的時段, 所以依使用習慣, 不一定會遇到
16:21:44 <_13h> 我裝 windows xp 後第一件事就是先關排程.... 難怪我的 windows 越用越慢XD
16:22:06 <_13h> kanru: 可以啊
16:22:45 <_13h> kanru: 簡單的方法就是遇到某條件就不要再算下去，把前一次結果直接傳回去就好XD
16:23:25 <_13h> 如果有 call/cc 的話就可以提早跳出去XD
16:24:28 <kanru> _13h: 可是沒有 call/cc 的話後面每個 element 還是會被 access 過一次 :P
16:28:32 <_13h> 是沒錯，可是 reduce 本來就是要處理某個集合裡的所有資料啦，如果中間會停下來，感覺不應該用 reduce ?
16:29:24 <Yu-Lin> 中間要停下來，等同一定有什麼條件的資料是不處理的
16:30:02 <b4283> 仿照 takeWhile 的風格自己寫一個
16:30:35 <CindyLinz> 是要.. 乘出來的值=2時要停嗎?
16:30:45 <CindyLinz> 那不是就直接輸出 2 就好?
16:30:49 <Jhe__> 例如拉@@ ...
16:30:54 <CindyLinz> 反正如果沒遇到 2.. 那也就 bottom 了 :p
16:31:06 <Jhe__> 但試 那個 list 是由別的函數產生的
16:31:10 <Jhe__> 是先是不知道的
16:31:16 <CindyLinz> Jhe__: 我只是想說.. 條件是由結果來判斷.. 而不是 input 來判斷嗎?
16:32:04 <Jhe__> 請檢視一下我的想法
16:32:12 <Jhe__> 其實就是剛剛那個東西
16:33:00 <Jhe__> 我盡力列出一個數的 因數且為基數的部分
16:33:11 <Jhe__> 但是prime test 我不知道該怎麼辦
16:33:25 <Jhe__> 所以 將這個list 從第一項開始往後連乘
16:33:34 <Jhe__> 值到積為 input
16:33:52 <Jhe__> 則 最後一被乘數 就是我要的 prime number
16:33:54 <CindyLinz> 基數是什麼意思呀?
16:34:02 <Jhe__> odd
16:34:05 <Jhe__> 沒選自@@
16:34:09 <Jhe__> 奇數
16:34:19 <CindyLinz> 喔喔 :p
16:34:30 <CindyLinz> 怪怪的...
16:34:31 <Jhe__> 這樣有錯嗎@@?
16:35:00 <CindyLinz> 這樣是說就不會有 3*3*5 這樣的組合了嗎?
16:35:05 <Jhe__> 不會
16:35:09 <CindyLinz> 每個質因數只會用到一次?
16:35:14 <Jhe__> 恩
16:35:36 <Jhe__> 產生 list 的函數是這樣的
16:35:37 <Jhe__> primeList y = [x | x <- [1,3 .. y],mod y x == 0]
16:35:38 <CindyLinz> 所以你的 input 是限制在每個質因數都只會有一次喔?
16:36:10 <Jhe__> 不過定義不嚴謹
16:36:34 <Jhe__> 應該算是 奇因數
16:36:40 <CindyLinz> 嗯嗯 奇因數
16:36:41 <Jhe__> 不是 質因數 ...
16:37:14 <Jhe__> 不知是對還是錯
16:37:17 <Jhe__> 呀對了 ...
16:37:24 <Jhe__> input 必定是質數
16:37:31 <Jhe__> 很大的質數 ...
16:37:50 <Jhe__> 剛剛有 跑過 ok 不過效率就 ...
16:38:03 <CindyLinz> 欸.. 我以為你要做的事情是將一個數作質因數分解 @@"
16:38:08 <CindyLinz> 不過剛剛那個 primeList
16:38:18 <Jhe__> 本來是想這樣
16:38:27 <CindyLinz> 可以把 x <- [1,3 .. y] 的 y 改成 sqrt y 之類的大小
16:38:39 <Jhe__> 我有事過
16:38:42 <Jhe__> 他會抱錯...
16:38:50 <Jhe__> 我不太會看他的 錯誤訊息 ..
16:38:56 <CindyLinz> type 不對
16:38:58 <Jhe__> 是我的問題嗎@@ ...
16:39:11 <CindyLinz> 嗯, 不過如果是要所有奇因數的話.. 那可能也不能 sqrt, 只能 /2
16:39:24 <CindyLinz> 因為這邊的 y 是整數呀
16:39:45 <CindyLinz> 要前後加一些轉浮點數, 還有 round 之類的再轉回整數
16:39:50 <Jhe__> 不能 sqrt 完以後在 轉整數嗎@@
16:40:00 <CindyLinz> 可以啊, 那你是怎麼寫的咧?
16:40:13 <Jhe__> 我剛剛就卡很久 ...
16:40:15 <Jhe__> 所以沒轉
16:40:18 <Jhe__> 就直接來 ...
16:40:27 <CindyLinz> 呃 ^^|
16:40:30 <Jhe__> 這裡應該拖了很多速度
16:40:35 <CindyLinz> 我找找
16:43:26 <CindyLinz> sqrt 的結果轉 Int 的部分可以這樣寫 [1.. round $ sqrt 5]
16:43:46 <Jhe__> $ 是啥東西@@?
16:43:48 <CindyLinz> 而.. Int 轉給 sqrt 參數的部分...
16:44:04 <CindyLinz> 喔 $ 可以想成 [ 1 .. round ( sqrt 5 ) ]
16:44:13 <Jhe__> 這麼好用@@
16:44:36 <CindyLinz> $ 是一個 priority 很低的 binary operator
16:44:59 <CindyLinz> 功能就是把它的後面, 塞給它的前面當參數
16:45:13 <CindyLinz> 所以剛好就變成可以拿來省括號的東西
16:46:22 <Jhe__> 詭異 ...
16:46:37 <Jhe__> 套近剛剛的 list comp. 裡面還是出錯
16:46:54 <CindyLinz> 因為 sqrt 參數的部分還沒轉
16:46:59 <CindyLinz> 嗯, 應該可以用 fromIntegral
16:47:23 <CindyLinz> 試試 [1 .. round $ sqrt $ fromIntegral y]
16:48:22 <Jhe__> 成功
16:48:26 <CindyLinz> :D
16:48:36 <Jhe__> 可以解是一下嗎@@?
16:48:40 <Jhe__> 我看
16:48:50 <Jhe__> round 跟 floor 的type 都一樣耶 ...
16:49:11 <CindyLinz> 它們兩個 type 一樣應該是合理的啊
16:49:14 <CindyLinz> 只是行為不一樣
16:50:01 <CindyLinz> fromIntegral 可以把「整數類」的東西轉成很多奇怪的東西
16:50:27 <CindyLinz> 把「整數類」轉為任何「數字類」的東西
16:50:48 <CindyLinz> 內建的「數字類」的 type 有 Integer, Int, Float, Double
16:51:08 <CindyLinz> 「整數類」的 type 有 Int, Integer
16:51:46 <CindyLinz> round 可以把 
16:52:07 <CindyLinz> 「分數類」而且是「實數類」的東西轉為任何「整數類」的東西
16:52:08 <Jhe__> 那怎麼不是這樣 fromIntegral $ round $ sqrt INPUT
16:52:24 <CindyLinz> 因為你的 INPUT 應該是一個整數?
16:52:29 <CindyLinz> 那個 y 應該是整數吧
16:52:31 <Jhe__> 是 ...
16:52:46 <CindyLinz> sqrt 要吃 Fractional
16:53:08 <Jhe__> 喔~
16:53:13 <Jhe__> 他的type 是 floating
16:53:29 <CindyLinz> 啊對 應該是吃 Floating.. 我看錯了
16:54:07 <Jhe__> 差別@@?
16:54:57 <CindyLinz> Floating 比 Fractional 多一些能用的運算
16:55:03 <CindyLinz> Floating imply Fractional
16:55:27 <CindyLinz> 你手邊有 ghci 嗎?
16:55:35 <CindyLinz> 可以用 :i Floating 和 :i Fractional 查
16:55:58 <CindyLinz> Floating 比 Fractional 多的部分, 看起來主要是 c 的 math.h 裡面的東西
16:56:12 <CindyLinz> 三角函數, sqrt, exp, log 之類的
16:56:37 <CindyLinz> 而 Fractional 的部分, 是 Num 之外再加上兩數相除
16:56:51 <CindyLinz> 還有, Rational 可以轉為 Fractional
16:57:20 <CindyLinz> Num 的話就是 + - * 取負號, 取絕對值, 還有 fromInteger
16:58:18 <Jhe__> 我想我快吐了 @@
16:58:36 <CindyLinz> @@"
16:59:04 <CindyLinz> 可能要找個族譜之類的東西...
16:59:10 <Jhe__> 恩~
16:59:17 <Jhe__> 跟我想的一樣@@
16:59:28 <Jhe__> 想說喝口茶 好好檢視 log
16:59:34 <Jhe__> 畫個圖之類的
16:59:54 <CindyLinz> http://blogs.msdn.com/b/saeed/archive/2009/03/14/haskell-class-hierarchy-diagram.aspx
17:00:04 <CindyLinz> msdn.com 耶
17:02:22 <CindyLinz> Haskell 98 的.. 不過這邊有的應該現在都還適用
17:02:45 <_13h> 趁著 build project 的時候隨便寫了一個質因數分解.. 求 review XD
17:02:46 <CindyLinz> 嗯... 數字相關的我猜應該幾乎是完全沒動
17:03:29 <_13h> 唔  好像只有找出質因數
17:03:39 <CindyLinz> Jhe__: 你可以包一個 intSqrt = round . sqrt . fromIntegral
17:03:47 <CindyLinz> 然後就可以寫 [1.. intSqrt y]
17:04:01 <Jhe__> 是說 import module ?
17:04:32 <_13h> https://gist.github.com/letoh/634d9ef4789c48ab252d  判斷質數的部份先用假的XD
17:04:54 <CindyLinz> Jhe__: 不是, 是你可以找同個檔案的空白處定義這個函數
17:05:12 <Jhe__> 了解
17:05:42 <CindyLinz> _13h: 內建有限質數表...... ._.
17:05:50 <Jhe__> 哈哈~~
17:06:20 <_13h> 所以說先用假的嘛XD  邏輯大概就是那樣XD
17:06:57 <Jhe__> 目前是這樣 : oddList y = [x | x <- [1,3 .. round $ sqrt $ fromIntegral y],mod y x == 0]
17:07:08 <Jhe__> 還是不知道連乘的部分麼怎麼搞
17:09:31 <_13h> 我這樣寫算 haskell 風格嗎？是先用其他語言想好再翻譯過來的
17:10:16 <_13h> http://hackage.haskell.org/packages/archive/primes/0.2.0.0/doc/html/Data-Numbers-Primes.html
17:11:06 <CindyLinz> 應該 ok 吧?.. declare 氣味濃烈
17:12:07 <b4283> 內建質數表最快啊 XD~
17:13:23 <_13h> 其實本來是想弄個 memoization，不過這種有副作用的東西好像還是得弄個 monad 比較好處理?
17:17:51 <CindyLinz> Jhe__: 這樣可以嗎? 連乘
17:17:56 <CindyLinz> last $ takeWhile (<=2) $ scanl (*) 1 [1..]
17:18:29 <CindyLinz> scanl (*) [1..] 會製造出 [1, 1, 2, 6, 24, 120, 720, 5040, ...]
17:20:04 <_13h> 玩了一下 scanl 好有趣
17:20:36 <Jhe__> 所以我這個想法是對的@@
17:22:34 <CindyLinz> Jhe__: 再講一下哪個想法 ^^|  剛剛講過太多東西了 :p
17:22:57 <Jhe__> 用 oddList 產生一個 list
17:23:07 <Jhe__> 從第一項開始乘
17:23:20 <Jhe__> 乘到 == Input
17:23:25 <CindyLinz> 嗯嗯
17:23:37 <CindyLinz> 我的確是照你這想法去弄的
17:23:38 <Jhe__> 則 前一項 就是他最大的 prime number
17:24:39 <CindyLinz> 我不太理解.. 不過還好這應該是數學問題, 我聽不懂沒關係.. (誤)
17:24:51 <Jhe__> oddList 13195 -- [1,5,7,13,29,35,65,91]
17:25:02 <Jhe__> 1*5*7*13*29 = 13195
17:25:19 <Jhe__> 所以 29 就是他的 largest prime number
17:25:59 <Jhe__> 題目就是他給你一個 很大的數 要你找他的 largest prime factor
17:26:32 <CindyLinz> 而且它保證這個給定的很大的數, 其質因數的冪次都是1?
17:27:12 <Jhe__> 冪次???
17:27:22 <b4283> 而且它保證其質因數都是連續的
17:27:25 <CindyLinz> 那 171535 你會分解為怎樣?
17:27:49 <Jhe__> [1,5,7,13,29,35,65,91,145,169,203,377]
17:28:39 <b4283> 這個 list 裡面好像很多不是質數...
17:28:50 <Jhe__> 因為他是 oddList
17:28:54 <CindyLinz> 是奇因數
17:28:55 <Jhe__> 不是 primeList
17:29:24 <Jhe__> 這樣就掉漆了
17:29:33 <Jhe__> 171535 掛點
17:31:04 <CindyLinz> 有兩個13
17:31:09 <Jhe__> 恩 ..
17:31:21 <Jhe__> 最大還是 29
17:31:36 <CindyLinz> 我拿你剛剛的 13195 * 13
17:31:52 <Jhe__> 所以這只是巧合~~~
17:32:11 <Jhe__> 他給的另一個數字是 600851475143
17:32:29 <CindyLinz> 某種.. online judge?
17:32:37 <Jhe__> project euler
17:32:46 <CindyLinz> 他會故意給你全都滿足某種特性的 sample 來誤導人嗎?
17:32:46 <Jhe__> 我忘記上次是誰給我的了@@
17:32:54 <Jhe__> 應該是不會 ...
17:33:02 <Jhe__> 雖然這才第三提 ...
17:33:05 <Jhe__> 我進度緩慢呀~~~~~~~~
17:33:48 <Jhe__> 看來還是要乖乖作質因數分解 ...
17:33:53 <CindyLinz> ._.
17:34:48 <Jhe__> *_*
17:34:58 <_13h> 我的 project euler 一開始也是用 haskell 寫  進度很慢只好改回 python
17:35:31 <Jhe__> 因為正在學就 ...
17:35:31 <CindyLinz> Jhe__: 根據頻道主題... _13h 是不好的榜樣, 好孩子不要學... (逃)
17:35:37 <Jhe__> 堅持用 haskell 了
17:35:55 <_13h> 語法不熟這段時期很難熬啊XD
17:36:14 <Jhe__> 我覺得 typeclass 會讓我頭有點不舒服
17:36:44 <_13h> 不過我只是先用 python 解出來，再用其他語言重寫一次驗證...通常是用 scheme 或 haskell
17:36:45 <CindyLinz> Jhe__: 想成 Java 的 interface 吧?
17:37:28 <Jhe__> Java 的 interface 跟 Objective C 的 interface 一樣嗎@@?
17:37:31 <CindyLinz> Jhe__: 只是 Java 的 interface 只能描述一個「東西」, Haskell 的 class 可以描述若干個東西之間的關係
17:37:38 <CindyLinz> 我不會 Objective C
17:37:46 <Jhe__> 我不會 Java
17:37:49 <CindyLinz> XD
17:37:53 <Jhe__> XD
17:38:03 <Jhe__> 看你的敘述應該差不多
17:38:04 <_13h> 不太懂「Java 的 interface 只能描述一個「東西」」的意思
17:38:14 <_13h> interfce 應該是描述某種行為？
17:38:23 <Jhe__> 類似 宣告 他的長相 時作又是另一回事 ....
17:38:29 <Jhe__> 實作*
17:38:49 <CindyLinz> _13h: Java interface 是描述一個東西的行為, 不是描述若干東西在一起時的行為呀
17:39:05 <_13h> 喔  原來是這個意思  瞭解了
17:39:44 <Jhe__> 所以那是巧合 ... 巧合 ... 巧合 ....
17:39:44 <_13h> 其實是比較像在描述某一類東西的行為，用這樣來聯想 typeclass 應該比較接近？
17:40:09 <_13h> 只是 java 要處理「某一類」得用繼承的方式XD
17:40:34 <CindyLinz> _13h: 如果是剛剛講的那些 Num, Integral, Fractional 的話, 都還是在描述一個東西啦
17:41:00 <Jhe__> haskell 怎麼用 ... ?
17:41:13 <_13h> 我還是把 Num 這些東西當作分類耶  所以這樣想會有問題囉？
17:41:58 <_13h> 例如 Num 是 Integral 的 base class XD
17:42:17 <CindyLinz> 這樣想沒有問題啊. 但是是特例.
17:42:20 <Jhe__> 不是嗎@@?
17:42:41 <CindyLinz> 例如說 Num 是 class Num a where ....
17:42:54 <CindyLinz> haskell 有 class XX a b c where ....
17:42:57 <CindyLinz> 一次講三個
17:43:16 <CindyLinz> 我找一下 build in 的例子...
17:46:22 <CindyLinz> Data.Array.IArray 裡面有 class IArray a e where ....
17:46:58 <CindyLinz> a 是 constructor, e 是 element type
17:47:37 <_13h> 唔，constructor 的部份我是用 c++ 的方式來想XD
17:47:57 <CindyLinz> 千萬不要 XD
17:48:39 <CindyLinz> haskell 的 constructor 是 data Maybe a = Just a | Nothing 的 Just 和 Nothing 啊
17:49:40 <_13h> 不是 class constructor，是說 template
17:51:47 <CindyLinz> template 是不是比較像 data xx = xx 的等號左邊的部分啊?
17:52:08 <CindyLinz> 覺得找來這個 build in 例子不太有 fu....
17:52:20 <CindyLinz> 講個應該不在 build in 的例子好了...
17:54:07 <CindyLinz> 我看過一個 class 是這樣定義的: class Mult a b c where (*) :: a -> b -> c
17:54:23 <_13h> http://en.wikibooks.org/wiki/Haskell/Advanced_type_classes#Multi-parameter_type_classes
17:54:25 <_13h> 這個嗎?
17:54:32 <CindyLinz> 符合這個 Mult class 的東西們, 表示可以作 a * b = c 的運算
17:55:08 <CindyLinz> 所以就可以定義 數字*數字=數字, 矩陣*矩陣=矩陣, 矩陣*向量=向量 之類的東西
17:56:29 <CindyLinz> 對 這個
19:09:05 <Yu-Lin> 有點詭異，原本的程式碼在 python3 的速度是 ok 的，只會卡在 IO 上，增加了一個 path 的自動產生工具後，整個速度大幅下降到不可思議的地步
19:09:30 <Yu-Lin> 我原本想說是不是出在 closure 上，可以想一想，原本的程式碼是 ok 的
19:09:32 <Yu-Lin> gg
19:13:51 <_13h> 那個自動產生工具是做什麼用的？
19:14:02 <_13h> 跑一下 profiler 看看卡在哪?
19:17:57 <Yu-Lin> 全部都是 python 呢
19:20:23 <_13h> python 也可以跑 profiler 呀
19:25:40 <Yu-Lin> 先下班了
19:25:41 <Yu-Lin> 掰
19:25:45 <Yu-Lin> 下禮拜一見
