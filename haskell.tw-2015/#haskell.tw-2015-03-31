01:04:23 <pkmx> brace 0 = [""] ; brace n = let go f = map f $ brace (n - 1) in go ("()" ++) `union` go (\s -> "(" ++ s ++ ")") `union` go (++ "()") ?
01:04:32 <pkmx> > let brace 0 = [""] ; brace n = let go f = map f $ brace (n - 1) in go ("()" ++) `union` go (\s -> "(" ++ s ++ ")") `union` go (++ "()") in brace 3
01:04:34 <lambdabot>  ["()()()","()(())","(()())","((()))","(())()"]
01:04:58 <pkmx> 是這個嗎XD?
01:05:06 <pkmx> 暴力解XD
01:05:36 <CindyLinz> 拿來 golf 看看 (大誤
01:06:38 <pkmx> @pl \s -> "(" ++ s ++ ")"
01:06:38 <lambdabot> ('(' :) . (++ ")")
01:07:48 <pkmx> 不過問問題的好像離開了 (攤手
01:08:43 <pkmx> > let brace 0 = [""] ; brace n = let go f = map f $ brace (n - 1) in go ("()" ++) `union` go (\s -> "(" ++ s ++ ")") `union` go (++ "()") in length $ brace 10
01:08:47 <lambdabot>  mueval-core: Time limit exceeded
01:09:00 <pkmx> 暴力解果然是不行的XD
01:12:25 <CindyLinz> :t cross
01:12:27 <lambdabot> Not in scope: ‘cross’
01:18:28 <CindyLinz> > let brace 0 = [""]; brace n = go n ++ concatMap (\i -> [a ++ b | a <- go i, b <- brace (n-i)]) [1..n-1]; go n = ['(' : m ++ ")" | m <- brace (n-1)] in brace 3
01:18:30 <lambdabot>  ["((()))","(()())","()(())","()()()","(())()"]
01:20:14 <CindyLinz> http://en.wikipedia.org/wiki/Catalan_number
01:21:01 <CindyLinz> length (brace 10) = 16796 # 查表法 (誤
01:22:35 <CindyLinz> > let brace 0 = [""]; brace n = go n ++ [a ++ b | i <- [1..n-1], a <- go i, b <- brace (n-i)]; go n = ['(' : m ++ ")" | m <- brace (n-1)] in brace 3
01:22:37 <lambdabot>  ["((()))","(()())","()(())","()()()","(())()"]
01:24:51 <CindyLinz> > let brace 0 = [""]; brace n = [a ++ b | i <- [1..n], a <- go i, b <- brace (n-i)]; go n = ['(' : m ++ ")" | m <- brace (n-1)] in brace 3
01:24:53 <lambdabot>  ["()()()","()(())","(())()","(()())","((()))"]
01:25:11 <pkmx> 發現我的brace 4算出來少一個...0.0
01:25:17 <CindyLinz> > let brace 0 = [""]; brace n = [a ++ b | i <- [1..n], a <- go i, b <- brace (n-i)]; go n = ['(' : m ++ ")" | m <- brace (n-1)] in brace 4
01:25:19 <lambdabot>  ["()()()()","()()(())","()(())()","()(()())","()((()))","(())()()","(())(())...
01:25:23 <CindyLinz> 娃 XD
01:25:27 <CindyLinz> > let brace 0 = [""]; brace n = [a ++ b | i <- [1..n], a <- go i, b <- brace (n-i)]; go n = ['(' : m ++ ")" | m <- brace (n-1)] in length $ brace 4
01:25:29 <lambdabot>  14
01:26:16 <pkmx>  let brace' 0 = [""] ; brace' n = let go f = map f $ brace' (n - 1) in go ("()" ++) `union` go (\s -> "(" ++ s ++ ")") `union` go (++ "()") ; brace 0 = [""]; brace n = [a ++ b | i <- [1..n], a <- go i, b <- brace (n-i)]; go n = ['(' : m ++ ")" | m <- brace (n-1)] in brace 4 \\ brace' 4
01:26:20 <pkmx> > let brace' 0 = [""] ; brace' n = let go f = map f $ brace' (n - 1) in go ("()" ++) `union` go (\s -> "(" ++ s ++ ")") `union` go (++ "()") ; brace 0 = [""]; brace n = [a ++ b | i <- [1..n], a <- go i, b <- brace (n-i)]; go n = ['(' : m ++ ")" | m <- brace (n-1)] in brace 4 \\ brace' 4
01:26:22 <lambdabot>  ["(())(())"]
01:27:30 <CindyLinz> > let brace 0 = [""]; brace n = ["(" ++ a ++ ")" ++ b | i <- [1..n], a <- brace (i-1), b <- brace (n-i)] in brace 3
01:27:33 <lambdabot>  ["()()()","()(())","(())()","(()())","((()))"]
01:28:26 <CindyLinz> > let brace 0 = [""]; brace n = ["(" ++ a ++ ")" ++ b | i <- [1..n], a <- brace (i-1), b <- brace (n-i)] in length $ brace 4
01:28:28 <lambdabot>  14
01:30:48 <CindyLinz> > let brace 0 = [""]; brace n = ["(" ++ a ++ ")" ++ b | i <- [1..n], a <- brace (i-1), b <- brace (n-i)] in length $ brace 10
01:30:51 <lambdabot>  16796
01:31:23 <CindyLinz> 欸... 直接取 length 的話, 字串內容感覺是不會展開耶
01:31:43 <pkmx> 我果然不適合做演算法 (掩面
01:31:51 <pkmx> 他只要知道 list 是怎麼展開的就好了吧
01:32:04 <CindyLinz> 嗯, 應該只會展開 bone 的部分
01:32:13 <CindyLinz> back bone?
01:33:39 <CindyLinz> > let brace 0 = [""]; brace n = ["(" ++ a ++ ")" ++ b | i <- [1..n], a <- brace (i-1), b <- brace (n-i)] in length $ brace 15
01:33:43 <lambdabot>  mueval-core: Time limit exceeded
01:33:46 <CindyLinz> > let brace 0 = [""]; brace n = ["(" ++ a ++ ")" ++ b | i <- [1..n], a <- brace (i-1), b <- brace (n-i)] in length $ brace 14
01:33:50 <lambdabot>  mueval-core: Time limit exceeded
01:33:54 <CindyLinz> 唉唉 ^^|
01:36:53 <pkmx> > let catalan 0 = 1; catalan n = sum [ a * b | i <- [1..n], let a = catalan (i - 1), let b = catalan (n - i)] in catalan 10
01:36:54 <lambdabot>  16796
01:36:58 <pkmx> > let catalan 0 = 1; catalan n = sum [ a * b | i <- [1..n], let a = catalan (i - 1), let b = catalan (n - i)] in catalan 15
01:37:02 <lambdabot>  mueval-core: Time limit exceeded
01:37:09 <pkmx> (攤手
01:37:35 <CindyLinz> 等等 XD
01:38:06 <CindyLinz> 應該要會快一點吧? XD
01:38:25 <pkmx> > let catalan 0 = 1; catalan n = sum [ a * b | i <- [1..n], let a = catalan (i - 1), let b = catalan (n - i)] in catalan 15 :: Int
01:38:29 <lambdabot>  mueval-core: Time limit exceeded
01:42:02 <CindyLinz> > let catalan = 0 : [[(catalan !! (i-1)) * (catalan !! (n-i)) | i <- [1..n]] | n <- [1..]] in catalan !! 15
01:42:04 <lambdabot>      Occurs check: cannot construct the infinite type: t1 ~ [t1]
01:42:04 <lambdabot>      Expected type: [t1]
01:42:04 <lambdabot>        Actual type: [[t1]]
01:42:16 <CindyLinz> > let catalan = 0 : [sum [(catalan !! (i-1)) * (catalan !! (n-i)) | i <- [1..n]] | n <- [1..]] in catalan !! 15
01:42:18 <lambdabot>  0
01:42:21 <CindyLinz> 囧
01:42:59 <CindyLinz> > let catalan = 1 : [sum [(catalan !! (i-1)) * (catalan !! (n-i)) | i <- [1..n]] | n <- [1..]] in catalan !! 15
01:43:02 <lambdabot>  9694845
01:43:08 <pkmx> > let fac n = product [1 .. n] ; catalan n = fac (2 * n) `div` (fac (n + 1) * fac n) in catalan 15
01:43:10 <lambdabot>  9694845
01:43:17 <pkmx> 直接公式解吧
01:43:27 <CindyLinz> 我用 Dynamic Programming.. XD
01:43:46 <pkmx> > let fac n = product [1 .. n] ; catalan n = fac (2 * n) `div` (fac (n + 1) * fac n) in catalan 100
01:43:48 <lambdabot>  896519947090131496687170070074100632420837521538745909320
01:43:59 <pkmx> > let catalan = 1 : [sum [(catalan !! (i-1)) * (catalan !! (n-i)) | i <- [1..n]] | n <- [1..]] in catalan !! 100
01:44:01 <lambdabot>  896519947090131496687170070074100632420837521538745909320
01:44:47 <CindyLinz> > let catalan = listArray (1,200) (1 : [sum [(catalan ! (i-1)) * (catalan ! (n-i)) | i <- [1..n]] | n <- [1..]]) in catalan ! 200
01:44:49 <lambdabot>  *Exception: Ix{Integer}.index: Index (0) out of range ((1,200))
01:44:57 <CindyLinz> > let catalan = listArray (0,200) (1 : [sum [(catalan ! (i-1)) * (catalan ! (n-i)) | i <- [1..n]] | n <- [1..]]) in catalan ! 200
01:44:59 <lambdabot>  5122014932110170794675416931363282923244324645824758618649206944075787680231...
01:45:13 <CindyLinz> lambdabot 有 Array 耶 :p
01:45:43 <pkmx> 扯遠了xd
01:48:51 <CindyLinz> > let braces = listArray (0,200) ([""] : [["(" ++ a ++ ")" ++ b | i <- [1..n], a <- braces ! (i-1), b <- braces ! (n-i)] | n <- [1..]]) in braces ! 3
01:48:53 <lambdabot>  ["()()()","()(())","(())()","(()())","((()))"]
01:48:57 <CindyLinz> > let braces = listArray (0,200) ([""] : [["(" ++ a ++ ")" ++ b | i <- [1..n], a <- braces ! (i-1), b <- braces ! (n-i)] | n <- [1..]]) in braces ! 200
01:48:59 <lambdabot>  ["()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()...
01:49:09 <CindyLinz> > let braces = listArray (0,200) ([""] : [["(" ++ a ++ ")" ++ b | i <- [1..n], a <- braces ! (i-1), b <- braces ! (n-i)] | n <- [1..]]) in length (braces ! 200)
01:49:15 <lambdabot>  mueval-core: Time limit exceeded
01:49:16 <lambdabot>  mueval: ExitFailure 1
01:49:19 <pkmx> 0.0
01:49:36 <CindyLinz> 啊 這樣變回用數的還是不能太長
01:49:46 <CindyLinz> > let braces = listArray (0,200) ([""] : [["(" ++ a ++ ")" ++ b | i <- [1..n], a <- braces ! (i-1), b <- braces ! (n-i)] | n <- [1..]]) in length (braces ! 15)
01:49:51 <lambdabot>  mueval-core: Time limit exceeded
01:49:54 <CindyLinz> 噗
01:50:05 <CindyLinz> > let braces = listArray (0,200) ([""] : [["(" ++ a ++ ")" ++ b | i <- [1..n], a <- braces ! (i-1), b <- braces ! (n-i)] | n <- [1..]]) in length (braces ! 12)
01:50:08 <lambdabot>  208012
01:50:14 <pkmx> 他還是要 allocate braces ! 15 個 cons cell 出來吧 XD
01:50:26 <pkmx> 整個就是 unary number 個概念
01:51:33 <CindyLinz> 而且每個數過的都不能丟, 被 array cache 住
01:52:48 <pkmx> 等電腦可以輕易把length . brace最佳化成catalan 就是人類要滅亡的時候了XD
01:53:11 <CindyLinz> ww
01:53:59 <CindyLinz> catalan 這麼規律的遞迴式, 我們讓電腦擁有解這一類型公式解的演算法就結案了耶?
08:44:27 <gansteed_m> 是晚上断网了，现在在看ircl.og
09:13:26 <petercommand> > let brace n = nub $ brace' n []; brace' 1 _ = ["()"]; brace' n a = do { x <- brace' (n-1) a; (("(" ++ x ++ ")"):("()" ++ x):(x ++ "()"):[]) } in brace 10
09:13:27 <lambdabot>  ["(((((((((())))))))))","()((((((((()))))))))","((((((((()))))))))()","(()((...
09:13:51 <petercommand> 隨手寫的暴力解XD
09:14:07 <petercommand> > let brace n = nub $ brace' n []; brace' 1 _ = ["()"]; brace' n a = do { x <- brace' (n-1) a; (("(" ++ x ++ ")"):("()" ++ x):(x ++ "()"):[]) } in brace 3
09:14:08 <lambdabot>  ["((()))","()(())","(())()","(()())","()()()"]
09:17:08 <petercommand> XD #< pkmx> 等電腦可以輕易把length . brace最佳化成catalan 就是人類要滅亡的時候了XD
11:07:19 <gansteed> petercommand, 收到 :)
12:16:22 <CindyLinz> 竟然用 nub.. OAO
12:58:36 <petercommand> CindyLinz: 看起來很可怕XD
13:05:23 <CindyLinz> let brace n = nub $ brace' n []; brace' 1 _ = ["()"]; brace' n a = do { x <- brace' (n-1) a; (("(" ++ x ++ ")"):("()" ++ x):(x ++ "()"):[]) } in length $ brace 10
13:05:32 <CindyLinz> > let brace n = nub $ brace' n []; brace' 1 _ = ["()"]; brace' n a = do { x <- brace' (n-1) a; (("(" ++ x ++ ")"):("()" ++ x):(x ++ "()"):[]) } in length $ brace 10
13:05:35 <lambdabot>  4181
13:05:44 <CindyLinz> 數字怪怪 o.o
13:06:51 <CindyLinz> > let brace n = nub $ brace' n []; brace' 1 _ = ["()"]; brace' n a = do { x <- brace' (n-1) a; (("(" ++ x ++ ")"):("()" ++ x):(x ++ "()"):[]) } in length $ brace 4
13:06:53 <lambdabot>  13
13:08:08 <CindyLinz> 4 的時候看起來 (())(()) 不會包含到?
13:09:25 <petercommand> > let brace n = nub $ brace' n []; brace' 1 _ = ["()"]; brace' n a = do { x <- brace' (n-1) a; (("(" ++ x ++ ")"):("()" ++ x):(x ++ "()"):[]) } in brace 4
13:09:26 <lambdabot>  ["(((())))","()((()))","((()))()","(()(()))","()()(())","()(())()","((())())...
13:09:50 <petercommand> 對耶..
13:10:25 <petercommand> 我寫錯了XD
13:11:17 <petercommand> 來改改...
13:43:42 <petercommand> > let brace 0 = []; brace 1 = ["()"]; brace n = concat [ ["(" ++ x ++ ")" ++ y , "()" ++ x ++ y, x ++ "()" ++ y, x ++ y ++ "()", "(" ++ x ++ y ++ ")", x ++ "(" ++ y ++ ")" | x <- brace i | y <- brace (n-i) | i <- [1..(n-1)] ] in brace 4
13:43:44 <lambdabot>  <hint>:1:171: parse error on input ‘|’
13:43:59 <petercommand> > let brace 0 = []; brace 1 = ["()"]; brace n = concat [ ["(" ++ x ++ ")" ++ y , "()" ++ x ++ y, x ++ "()" ++ y, x ++ y ++ "()", "(" ++ x ++ y ++ ")", x ++ "(" ++ y ++ ")"] | x <- brace i | y <- brace (n-i) | i <- [1..(n-1)] ] in brace 4
13:44:01 <lambdabot>      Ambiguous occurrence ‘i’
13:44:01 <lambdabot>      It could refer to either ‘L.i’, defined at L.hs:142:27
13:44:01 <lambdabot>                            or ‘Debug.SimpleReflect.i’,
13:47:05 <petercommand> > let brace 0 = []; brace 1 = ["()"]; brace n = concat [ ["(" ++ x ++ ")" ++ y , "()" ++ x ++ y, x ++ "()" ++ y, x ++ y ++ "()", "(" ++ x ++ y ++ ")", x ++ "(" ++ y ++ ")"] | x <- brace j | y <- brace (n-j) | j <- [1..(n-1)] ] in brace 4
13:47:07 <lambdabot>  *Exception: stack overflow
13:47:23 <petercommand> 為甚麼 i 會有問題@@
13:47:31 <petercommand> > let brace 0 = []; brace 1 = ["()"]; brace n = concat [ ["(" ++ x ++ ")" ++ y , "()" ++ x ++ y, x ++ "()" ++ y, x ++ y ++ "()", "(" ++ x ++ y ++ ")", x ++ "(" ++ y ++ ")"] | x <- brace j | y <- brace (n-j) | j <- [1..(n-1)] ] in brace 1
13:47:32 <lambdabot>  ["()"]
13:47:35 <petercommand> > let brace 0 = []; brace 1 = ["()"]; brace n = concat [ ["(" ++ x ++ ")" ++ y , "()" ++ x ++ y, x ++ "()" ++ y, x ++ y ++ "()", "(" ++ x ++ y ++ ")", x ++ "(" ++ y ++ ")"] | x <- brace j | y <- brace (n-j) | j <- [1..(n-1)] ] in brace 2
13:47:37 <lambdabot>  *Exception: stack overflow
13:47:49 <petercommand> 好像又寫錯了XD
14:12:22 <petercommand> 為什麼上面的 i 會出現 ambiguous occurrence 呢?
14:27:56 <pkmx> 你的 i 看起來是個 free variable ?
14:36:02 <pkmx> 而且你寫成ParallelListComp了XDrz
14:36:46 <pkmx> > [ () | a <- [1..b] , b <- [1..10] ]
14:36:47 <lambdabot>      Ambiguous occurrence ‘b’
14:36:48 <lambdabot>      It could refer to either ‘L.b’, defined at L.hs:142:16
14:36:48 <lambdabot>                            or ‘Debug.SimpleReflect.b’,
14:44:53 <CindyLinz> petercommand: list comprehensive 裡面右邊的可以用左邊的, 左邊的不能用右邊的; 可以理解為 monad 的 do-notation 裡面後面可以用前面前面不能用後面
14:53:12 <petercommand> 喔喔...
14:53:41 <petercommand> 等等回來看
15:12:45 <pkmx> 暴力解應該是這樣XD # brace n = filter isBalanced $ replicateM (n * 2) "()"
15:22:04 <CindyLinz> (Y)
15:49:11 <CindyLinz> isBalance 好像沒有比較好寫的樣子.. OAO
16:14:36 <CindyLinz> > brace n = filter isBalanced $ replicateM (n * 2) "()"; isBalance "" = True; isBalance str = or ((head str == '(' && last str == ')' && isBalance (mid str)) : (zipWith (&&) (map isBalance $ mid $ inits str) (map isBalance $ mid $ tails str))); mid = init . tail in brace 3
16:14:38 <lambdabot>  <hint>:1:9: parse error on input ‘=’
16:14:47 <CindyLinz> > let brace n = filter isBalanced $ replicateM (n * 2) "()"; isBalance "" = True; isBalance str = or ((head str == '(' && last str == ')' && isBalance (mid str)) : (zipWith (&&) (map isBalance $ mid $ inits str) (map isBalance $ mid $ tails str))); mid = init . tail in brace 3
16:14:49 <lambdabot>      Not in scope: ‘isBalanced’
16:14:50 <lambdabot>      Perhaps you meant ‘isBalance’ (line 1)
16:14:57 <CindyLinz> > let brace n = filter isBalance $ replicateM (n * 2) "()"; isBalance "" = True; isBalance str = or ((head str == '(' && last str == ')' && isBalance (mid str)) : (zipWith (&&) (map isBalance $ mid $ inits str) (map isBalance $ mid $ tails str))); mid = init . tail in brace 3
16:15:00 <lambdabot>  ["((()))","(()())","(())()","()(())","()()()"]
16:16:41 <CindyLinz> @type both
16:16:43 <lambdabot> (Applicative f, Data.Bitraversable.Bitraversable r) => (a -> f b) -> r a a -> f (r b b)
19:02:12 <pkmx> 0.0 我原本是想 isBalanced 可以用 scanl 寫 遇到(做succ 遇到)做pred 結果要是整個list >= 0 且最後一個元素是0
19:05:54 <pkmx> > let isBalanced [] = True ; isBalanced xs = let xs' = scanl (flip $ \c -> case c of '(' -> succ ; ')' -> pred) 0 xs in all (>= 0) xs' && last xs' == 0 in isBalanced "((()))()"
19:05:56 <lambdabot>  True
19:06:16 <pkmx> > let isBalanced [] = True ; isBalanced xs = let xs' = scanl (flip $ \c -> case c of '(' -> succ ; ')' -> pred) 0 xs in all (>= 0) xs' && last xs' == 0 in isBalanced "((())()"
19:06:18 <lambdabot>  False
19:06:43 <CindyLinz> 果然很長啊~ (咦
19:07:13 <pkmx> > let isBalanced [] = True ; isBalanced xs = let xs' = scanl (flip $ \c -> case c of '(' -> succ ; ')' -> pred) 0 xs in all (>= 0) xs' && last xs' == 0 ; brace n = filter isBalanced $ replicateM (n * 2) "()" in brace 4
19:07:15 <lambdabot>  ["(((())))","((()()))","((())())","((()))()","(()(()))","(()()())","(()())()...
19:07:18 <pkmx> > let isBalanced [] = True ; isBalanced xs = let xs' = scanl (flip $ \c -> case c of '(' -> succ ; ')' -> pred) 0 xs in all (>= 0) xs' && last xs' == 0 ; brace n = filter isBalanced $ replicateM (n * 2) "()" in brace 3
19:07:20 <lambdabot>  ["((()))","(()())","(())()","()(())","()()()"]
19:07:26 <pkmx> > let isBalanced [] = True ; isBalanced xs = let xs' = scanl (flip $ \c -> case c of '(' -> succ ; ')' -> pred) 0 xs in all (>= 0) xs' && last xs' == 0 ; brace n = filter isBalanced $ replicateM (n * 2) "()" in length $ brace 4
19:07:28 <lambdabot>  14
19:07:31 <pkmx> \o/
20:27:44 <CindyLinz> 喔喔 算深度
20:33:46 <petercommand> > let isBalanced x = foldl (\acc x -> if x > 0 then (if x == '(' then x + 1 else x - 1) else x == (-1) ) 0 x; brace n = filter isBalanced $ replicateM (n * 2) "()" in brace 4
20:33:48 <lambdabot>      Couldn't match expected type ‘Char’ with actual type ‘Bool’
20:33:48 <lambdabot>      In the expression: x == (- 1)
20:33:48 <lambdabot>      In the expression:
20:34:10 <petercommand> > let isBalanced x = foldl (\acc x -> if x > 0 then (if x == '(' then x + 1 else x - 1) else x == (-1) ) 0 x; brace n = filter (\x -> isBalanced x >= 0) $ replicateM (n * 2) "()" in brace 4
20:34:12 <lambdabot>      Couldn't match expected type ‘Char’ with actual type ‘Bool’
20:34:12 <lambdabot>      In the expression: x == (- 1)
20:34:12 <lambdabot>      In the expression:
20:35:03 <petercommand> > let isBalanced x = foldl (\acc x -> if x > 0 then (if x == '(' then acc + 1 else acc - 1) else (-1) ) 0 x; brace n = filter (\x -> isBalanced x >= 0) $ replicateM (n * 2) "()" in brace 4
20:35:05 <lambdabot>      Could not deduce (Num Char) arising from the literal ‘0’
20:35:05 <lambdabot>      from the context (Num b, Foldable t)
20:35:05 <lambdabot>        bound by the inferred type of
20:35:45 <petercommand> > let isBalanced x = foldl (\acc x -> if acc >= 0 then (if x == '(' then acc + 1 else acc - 1) else (-1) ) 0 x; brace n = filter (\x -> isBalanced x >= 0) $ replicateM (n * 2) "()" in brace 4
20:35:47 <lambdabot>  ["((((((((","((((((()","(((((()(","(((((())","((((()((","((((()()","((((())(...
20:35:55 <petercommand> > let isBalanced x = foldl (\acc x -> if acc >= 0 then (if x == '(' then acc + 1 else acc - 1) else (-1) ) 0 x; brace n = filter (\x -> isBalanced x >= 0) $ replicateM (n * 2) "()" in length $ brace 4
20:35:57 <lambdabot>  70
20:38:03 <CindyLinz> ((((( 好像會過
20:38:28 <CindyLinz> 最後 == 0
20:39:22 <petercommand> > let isBalanced x = foldl (\acc x -> if acc >= 0 then (if x == '(' then acc + 1 else acc - 1) else (-1) ) 0 x; brace n = filter (\x -> isBalanced x == 0) $ replicateM (n * 2) "()" in brace 4
20:39:24 <lambdabot>  ["(((())))","((()()))","((())())","((()))()","(()(()))","(()()())","(()())()...
20:39:36 <petercommand> 恩恩 == 0
20:39:54 <petercommand> > let isBalanced x = foldl (\acc x -> if acc >= 0 then (if x == '(' then acc + 1 else acc - 1) else (-1) ) 0 x; brace n = filter (\x -> isBalanced x == 0) $ replicateM (n * 2) "()" in length $ brace 4
20:39:56 <lambdabot>  14
21:25:06 <pkmx> 用 -1 代表失敗 髒髒
21:26:32 <petercommand> Maybe 應該比較好XD
21:29:59 <CindyLinz> > let isBalanced x = foldM (\acc x -> if x == '(' then Just (acc + 1) else if acc > 0 then Just (acc - 1) else Nothing) 0 x; brace n = filter (\x -> isBalanced x == Just 0) $ replicateM (n * 2) "()" in length $ brace 4
21:30:01 <lambdabot>  14
